install.packages("gdalUtils")
library("gdalUtils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos = "http://R-Forge.R-project.org", type = "source")
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgdal", type="source")
library(rgdal)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
rgdal::writeRaster(fs.years.post,"~/Documents/git/regionalrisk/analyses/output/fs.postCC", bylayer=TRUE,format="GTiff")
install.packages("rgeos", type="source")
install.packages("rgeos", type = "source")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages(c('rgdal','rgeos'),repos="http://www.stats.ox.ac.uk/pub/RWin")
library("rgeos", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rgeos", unload=TRUE)
install.packages("rgdal")
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(rstanarm)
library(arm)
# Set Working Directory
setwd("~/Documents/git/springfreeze")
timeline<-read.csv("input/hf003-06-mean-spp.csv", header=TRUE)
weather<-read.csv("input/WeatherData.csv", header=TRUE)
hf<-timeline[!is.na(timeline$l75.jd),]
spp<-as.data.frame(table(hf$species))
spp$include<-ifelse(spp$Freq==25, TRUE, NA)
spp<-spp[!is.na(spp$include),]
sp<-unique(spp$Var1)
d<-timeline%>%
dplyr::select(year, species, bb.jd, l75.jd) %>%
filter(species%in%sp)
d$year<-as.numeric(d$year)
d$risk<-d$l75.jd-d$bb.jd
d<-na.omit(d)
df<-d%>%
gather("phenophase", "doy", bb.jd, l75.jd)
x<-paste(df$year, df$doy)
df$Date<-as.Date(strptime(x, format="%Y %j"))
## Weather data
w<-weather %>%
filter(Site == "hf")%>%
filter(JD<=180)
w$AirT<-ifelse(is.na(w$AirT), 0, w$AirT)
w$gdd <- w$AirT - 5
w$gdd <-ifelse(w$gdd>0, w$gdd, 0)
w$count <- ave(
w$gdd, w$Year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
w<-dplyr::rename(w, year=Year)
w<-dplyr::rename(w, doy=JD)
x<-paste(w$year, w$doy)
w$Date<-as.Date(strptime(x, format="%Y %j"))
w<-w[!is.na(w$AirTMin),]
w$frz<-ifelse(w$AirTMin<0, 1, 0)
w$freezes<-ave(
w$frz, w$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
#w<-dplyr::select(w, Date, gdd, count, frz)
#w$year<-as.numeric(substr(w$Date, 1, 4))
#dxx<-d
#dxx$fs.lo<-NA
#for(i in c(1:nrow(w))){
#  for(j in c(1:nrow(dxx)))
#      dxx$fs.lo[j]<-ifelse(dxx$l75.jd[j]==w$doy[i] & dxx$year[j]==w$year[i], w$freezes[i], dxx$fs.lo[j])
#}
#dxx$fs.bb<-NA
#for(i in c(1:nrow(w))){
#  for(j in c(1:nrow(dxx)))
#    dxx$fs.bb[j]<-ifelse(dxx$bb.jd[j]==w$doy[i] & dxx$year[j]==w$year[i], w$freezes[i], dxx$fs.bb[j])
#}
#dxx$afrzs<-dxx$fs.lo-dxx$fs.bb
#dxx$risk<-dxx$l75.jd-dxx$bb.jd
dx<-inner_join(df,w)
count<-dplyr::select(dx, doy, year, count)
count<-count[!duplicated(count),]
count$doy<-as.numeric(count$doy)
count<-filter(count, count<=500)
gdd<-d
gdd$bb.jd<-as.numeric(gdd$bb.jd)
gdd$bb.gdd<-NA
gdd$l75.gdd<-NA
for(i in c(1:nrow(gdd))){
for(j in c(1:nrow(count)))
gdd$bb.gdd[i]<-ifelse(gdd$bb.jd[i]==count$doy[j] & gdd$year[i]==count$year[j], count$count[j], gdd$bb.gdd[i])
}
for(i in c(1:nrow(gdd))){
for(j in c(1:nrow(count)))
gdd$l75.gdd[i]<-ifelse(gdd$l75.jd[i]==count$doy[j] & gdd$year[i]==count$year[j], count$count[j], gdd$l75.gdd[i])
}
gdd$bb.gdd<-ifelse(gdd$year==1997 & gdd$bb.jd==129 & gdd$species=="ACSA", 45, gdd$bb.gdd)
gdd$bb.gdd<-ifelse(gdd$year==1999 & gdd$bb.jd==129 & gdd$species =="FRAM", 108, gdd$bb.gdd)
gdd$bb.gdd<-ifelse(gdd$year==1992 & gdd$bb.jd==140 & gdd$species=="QUAL", 154, gdd$bb.gdd)
gdd$l75.gdd<-ifelse(gdd$year==1998 & gdd$l75.jd==135 & gdd$species=="BEAL", 186, gdd$l75.gdd)
gdd$agdd<-gdd$l75.gdd-gdd$bb.gdd
#gx<-full_join(dxx, gdd)
years<-c("2010", "2014")
#gx<-filter(gx, year%in%years)
#gx$z.agdd<-scale(gx$agdd, center=TRUE, scale=FALSE)
#gx$z.year<-scale(gx$year, center=TRUE, scale=FALSE)
#gx$z.bb<-scale(gx$bb.jd, center=TRUE, scale=FALSE)
#m1<-lm(risk~afrzs+z.year+z.agdd, data=gx)
#display(m1)
#m2<-lm(l75.gdd~bb.jd+afrzs, data=gx)
#display(m2)
#m3<-lm(bb.jd~afrzs+agdd, data=gx)
#display(m3)
#m4<-lm(risk~agdd+afrzs,data=gx)
#display(m4)
#fit1<-stan_glm(risk~bb.gdd+bb.jd, data=gx)
#fit1
#plot(fit1, pars="beta")
w$bb<-NA
for(i in c(1:nrow(w))){
for(j in c(1:nrow(d)))
w$bb[i]<-ifelse(w$doy[i]==d$bb.jd[j] & w$year[i]==d$year[i], d$species[j], w$bb[i])
}
w$lo<-NA
for(i in c(1:nrow(w))){
for(j in c(1:nrow(d)))
w$lo[i]<-ifelse(w$doy[i]==d$l75.jd[j] & w$year[i]==d$year[i], d$species[j], w$lo[i])
}
fs<-full_join(w, df, by=c("doy", "year", "Date"))
fs<-dplyr::select(fs, Date, year, doy, count, phenophase, frz, species)
fs<-fs%>%
filter(year>=1990)%>%
filter(doy>=90)
fs$sp.year<-paste(fs$species, fs$year)
for(i in unique(fs$sp.year)){
fs$freezes <- ave(
fs$frz, fs$species, fs$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
}
#gdd$z.agdd<-scale(gdd$agdd, center=TRUE, scale=FALSE)
#gdd$z.bb<-scale(gdd$bb.jd, center=TRUE, scale=FALSE)
#gdd$z.year<-scale(gdd$year, center=TRUE, scale=FALSE)
#gdd$z.risk<-scale(gdd$risk, center=TRUE, scale=FALSE)
#gdd$z.bbgdd<-scale(gdd$bb.gdd, center=TRUE, scale=FALSE)
#gdd$mean<-ave(gdd$bb.jd, gdd$year)
#gdd$z.mean<-scale(gdd$mean, center=TRUE, scale=FALSE)
#gdd$m.risk<-ave(gdd$risk, gdd$year)
dg<-dplyr::select(gdd, -z.agdd, -z.bb, -z.year, -z.risk, -z.bbgdd)
dg$mean<-ave(dg$bb.jd, dg$year)
#mod1<-stan_glm(risk~agdd+mean, data=gdd)
#mod1
#plot(mod1, pars="beta")
avg<-dplyr::select()
#gdd$year<-as.numeric(gdd$year)
#m1<-lm(m.risk~year, data=gdd)
#display(m1)
#m2<-lm(risk~bb.jd, data=gdd)
#display(m2)
#m3<-lm(agdd~risk+bb.jd, data=gdd)
#display(m3)
years<-c("1997", "2012")
ggplot(gdd, x=species, y=bb.gdd) + geom_boxplot(aes(x=species, y=bb.gdd))
gdd$mean<-ave(gdd$bb.gdd, gdd$year)
w.yr<-w%>%
filter(year%in% years)%>%
dplyr::select(year, doy, AirTMin)%>%
filter(doy>=110)%>%
filter(doy<=172)
w.yr$fs<-ifelse(w.yr$AirTMin<=-2, w.yr$AirTMin, NA)
w.yr<-w.yr[!is.na(w.yr$fs),]
gdd.yr<-filter(gdd, year%in%years)
gdd$ord<- reorder(gdd$species, gdd$risk)
gdd.yr$code <- reorder(gdd.yr$species, gdd.yr$year)
gdd.yr$ord<- reorder(gdd.yr$code, gdd.yr$bb.jd)
gdd.yr$m.risk<-ave(gdd.yr$risk, gdd.yr$year)
hf<-ggplot(gdd.yr, aes(x=ord,ymin = bb.gdd, ymax = l75.gdd, group=interaction(species, year) )) +
geom_point(aes(y=bb.gdd, col="forestgreen"), position = position_dodge(.5)) + geom_point(aes(y=l75.gdd, col="darkgreen"), position = position_dodge(.5)) +
geom_linerange(aes(x=ord,ymin = bb.gdd, ymax = l75.gdd, col=factor(year)), position=position_dodge(.5)) +  ylab("GDDs")  +
scale_color_manual(labels = c("1997","2012", "Leafout GDD", "Budburst GDD"),
values = c("#F8766D","#00BFC4", "green4", "darkolivegreen3")) +
xlab("Species") +coord_flip() + labs(color="Phenophase and Year")+ geom_hline(yintercept=196, color="#00BFC4", linetype=2)
plot(hf)
hf.bb<-ggplot(gdd.yr, aes(x=ord,ymin = bb.jd, ymax = l75.jd, group=interaction(species, year) )) +
geom_point(aes(y=bb.jd, col="forestgreen"), position = position_dodge(.5)) + geom_point(aes(y=l75.jd, col="darkgreen"), position = position_dodge(.5)) +
geom_linerange(aes(x=ord,ymin = bb.jd, ymax = l75.jd, col=factor(year)), position=position_dodge(.5)) +  ylab("Day of Year") +
scale_color_manual(labels = c("1997","2012", "Leafout", "Budburst"), values = c("#F8766D","#00BFC4", "green4", "darkolivegreen3")) +
xlab("Species") +coord_flip() + labs(color="Phenophase and Year")  +
geom_hline(yintercept=120, color="#00BFC4", linetype=2)
plot(hf.bb)
a.gd<-gdd[!is.na(gdd$agdd),]
a.gd$y.gd<-ave(a.gd$agdd, a.gd$year)
a.hist<-a.gd%>%dplyr::select(y.gd, year)
a.hist<-a.hist[!duplicated(a.hist),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(a.hist, aes(x=as.factor(year), y=y.gd)) + geom_bar(fill=colors,stat="identity")
bb.gd<-gdd[!is.na(gdd$bb.gdd),]
bb.gd$b.gd<-ave(bb.gd$bb.gdd, bb.gd$year)
bb.hist<-bb.gd%>%dplyr::select(b.gd, year)
bb.hist<-bb.hist[!duplicated(bb.hist),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70", "firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(bb.hist, aes(x=as.factor(year), y=b.gd)) + geom_bar(fill=colors,stat="identity")
bb<-gdd[!is.na(gdd$bb.jd),]
bb$bb<-ave(bb$bb.jd, bb$year)
bhis<-bb%>%dplyr::select(bb, year)
bhis<-bhis[!duplicated(bhis),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(bhis, aes(x=as.factor(year), y=bb)) + geom_bar(fill=colors,stat="identity")
lo<-gdd[!is.na(gdd$l75.jd),]
lo$lo<-ave(lo$l75.jd, lo$year)
lhis<-lo%>%dplyr::select(lo, year)
lhis<-lhis[!duplicated(lhis),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(lhis, aes(x=as.factor(year), y=lo)) + geom_bar(fill=colors,stat="identity")
lgd<-gdd[!is.na(gdd$l75.jd),]
lgd$lo.gdd<-ave(lgd$l75.jd, lgd$year)
lg.his<-lgd%>%dplyr::select(lo.gdd, year)
lg.his<-lg.his[!duplicated(lg.his),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(lg.his, aes(x=as.factor(year), y=lo.gdd)) + geom_bar(fill=colors,stat="identity")
gdd$bb.lo<-ave(gdd$risk, gdd$year)
g.hist<-gdd%>%dplyr::select(bb.lo, year)
g.hist<-g.hist[!duplicated(g.hist),]
colors<-c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
ggplot(g.hist, aes(x=as.factor(year), y=bb.lo)) + geom_bar(fill=colors,stat="identity")
# Basic housekeeping
rm(list=ls())
options(stringsAsFactors=FALSE)
# Fake data for buburst stan work #
library(dplyr)
setwd("~/Documents/git/springfreeze/scripts/stan")
nsp = 9
nsite = 2
nwarm = 2
nphoto = 2
nchill = 3 ### should this be 3? Am I including all treatments or just the two?
rep = 6 # within each combination of treatments.
(ntot = nsite*nwarm*nphoto*nchill*rep) # 792 rows; 22k rows across species
# Build up the data frame
site = gl(nsite, rep, length=ntot)
warm = gl(nwarm, rep*nsite, length = ntot)
photo = gl(nphoto, rep*nwarm*nsite, length = ntot)
chill = gl(nchill, rep*nwarm*nphoto*nsite, length = ntot)
chill1 = ifelse(chill == 2, 1, 0)
chill2 = ifelse(chill == 3, 1, 0)
treatcombo = paste(warm, photo, chill1, chill2, sep = "_")
(d <- data.frame(site, warm, photo, chill1, chill2, treatcombo)) # critical coding error here!
###### Set up differences for each level
sitediff = 2
warmdiff = -10 # days earlier from 1 to 2
photodiff = -10
chill1diff = -5
chill2diff = -4
# interactions. 9 two-way interactions
sitewarm = 0
sitephoto = 0
sitechill1 = 0
sitechill2 = 0
warmphoto = 5 # positive 3.5. So at the warm level, the effect of longer days is muted by 3.5 days.
warmchill1 = 3 # both positive ~ 10.
warmchill2 = 3
photochill1 = 2 # from stan results
photochill2 = 2
######## SD for each treatment
sitediff.sd = 1
warmdiff.sd = 1
photodiff.sd = 1
chill1diff.sd = 1
chill2diff.sd = 1
# interactions. 9 two-way interactions
sitewarm.sd = 1
sitephoto.sd = 1
sitechill1.sd = 1
sitechill2.sd = 1
warmphoto.sd = 1
warmchill1.sd = 1
warmchill2.sd = 1
photochill1.sd = 1
photochill2.sd = 1
mm <- model.matrix(~(site+warm+photo+chill1+chill2)^2, data.frame(warm, photo))
# remove last column, chill1 x chill2, empty
mm <- mm[,-grep("chill1:chill2", colnames(mm))]
colnames(mm)
coeff <- c(1, sitediff, warmdiff, photodiff, chill1diff, chill2diff,
sitewarm, sitephoto, sitechill1, sitechill2,
warmphoto, warmchill1, warmchill2,
photochill1, photochill2
)
risk <- rnorm(n = length(warm), mean = mm %*% coeff, sd = 1) # should be able to do sd = mm %*% sd.coeff as well, with a different sd for each parameter.
(fake <- data_frame(risk, site, warm, photo, chill1, chill2))
summary(lm(risk ~ (site+warm+photo+chill1+chill2)^2, data = fake)) # sanity check
baseinter = 20 # baseline intercept across all species for DVR
spint <- baseinter + c(1:nsp)-mean(1:nsp) # different intercepts by species
fake <- vector()
for(i in 1:nsp){ # loop over species, as these are the random effect modeled
# Give species different difference values, drawn from normal. Could make dataframe of diffs and diff.sds, and use apply..
coeff <- c(spint[i],
rnorm(1, sitediff, sitediff.sd),
rnorm(1, warmdiff, warmdiff.sd),
rnorm(1, photodiff, photodiff.sd),
rnorm(1, chill1diff, chill1diff.sd),
rnorm(1, chill2diff, chill2diff.sd),
rnorm(1, sitewarm, sitewarm.sd),
rnorm(1, sitephoto, sitephoto.sd),
rnorm(1, sitechill1, sitechill1.sd),
rnorm(1, sitechill2, sitechill2.sd),
rnorm(1, warmphoto, warmphoto.sd),
rnorm(1, warmchill1, warmchill1.sd),
rnorm(1, warmchill2, warmchill2.sd),
rnorm(1, photochill1, photochill1.sd),
rnorm(1, photochill2, photochill2.sd)
)
risk <- rnorm(n = length(warm), mean = mm %*% coeff, sd = 0.1)
fakex <- data.frame(risk, sp = i, site, warm, photo, chill1, chill2)
fake <- rbind(fake, fakex)
}
summary(lm(risk ~ (site+warm+photo+chill1+chill2)^2, data = fake)) # sanity check
# now fix the levels to 0/1 (not 1/2) as R does
fake$site <- as.numeric(fake$site)
fake$site[fake$site==1] <- 0
fake$site[fake$site==2] <- 1
fake$warm <- as.numeric(fake$warm)
fake$warm[fake$warm==1] <- 0
fake$warm[fake$warm==2] <- 1
fake$photo <- as.numeric(fake$photo)
fake$photo[fake$photo==1] <- 0
fake$photo[fake$photo==2] <- 1
summary(lm(risk ~ (site+warm+photo+chill1+chill2)^2, data = fake)) # double sanity check
write.csv(fake, file="~/Documents/git/springfreeze/output/fakedata_dvr.csv", row.names = FALSE)
# Clear workspace
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
forlatex = TRUE # set to FALSE if just trying new figures, TRUE if outputting for final
runstan = TRUE # set to TRUE to actually run stan models. FALSE if loading from previous runs
library(ggplot2)
library(rstan)
library(rstanarm)
library(shinystan)
library(bayesplot)
library(dplyr)
setwd("~/Documents/git/springfreeze/")
source('scripts/stan/savestan.R')
dx<-read.csv("output/fakedata_dvr.csv", header=TRUE)
View(dx)
dxb <- dx[!is.na(dx$risk),]
View(dxb)
unique(dxb$site)
unique(dxb$chill1)
unique(dxb$chill2)
risk = dxb$risk # dvr as response
warm = as.numeric(dxb$warm)
site = as.numeric(dxb$site)
sp = as.numeric(dxb$sp)
photo = as.numeric(dxb$photo)
chill1 = as.numeric(dxb$chill1)
chill2 = as.numeric(dxb$chill2)
N = length(risk)
n_sp = length(unique(dxb$sp))
n_site = length(unique(dxb$site))
datalist.b<-list(risk=risk, warm=warm, site=site, sp=sp, photo=photo, chill1=chill1, chill2=chill2, N=N, n_sp=n_sp, n_site=n_site)
# 1. Budburst day.
if(runstan){
datalist.b <- list(risk = dxb$risk, # dvr as response
warm = as.numeric(dxb$warm),
sp = as.numeric(dxb$sp),
photo = as.numeric(dxb$photo),
chill1 = as.numeric(dxb$chill1),
chill2 = as.numeric(dxb$chill2),
N = length(risk),
n_sp = length(unique(dxb$sp))
)
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=3000, iter = 3000, chains = 4,
control = list(adapt_delta = 0.99))
#               , max_treedepth = 15))
}
datalist.b <- list(risk = dxb$risk, # dvr as response
warm = as.numeric(dxb$warm),
sp = as.numeric(dxb$sp),
photo = as.numeric(dxb$photo),
chill1 = as.numeric(dxb$chill1),
chill2 = as.numeric(dxb$chill2),
N = length(risk),
n_sp = length(unique(dxb$sp))
)
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=3000, iter = 3000, chains = 4,
control = list(adapt_delta = 0.99))
fit1<-stan_glm(risk~photo+chill1+warm +chill2+site+photo*warm+photo*chill1+photo*chill2 + photo*site+
warm*chill1+warm*chill2+warm*site+chill1*site+chill2*site+ (1|species), data=dxb)
fit1
fit1<-stan_glmer(risk~photo+chill1+warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|species), data=dxb)
fit1<-stan_glmer(risk~photo+chill1+warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|species), data=dxb)
stan_glmer(risk~photo+chill1+warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|species), data=dxb)
fit1
# Clear workspace
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
forlatex = TRUE # set to FALSE if just trying new figures, TRUE if outputting for final
runstan = TRUE # set to TRUE to actually run stan models. FALSE if loading from previous runs
library(ggplot2)
library(rstan)
library(rstanarm)
library(shinystan)
library(bayesplot)
library(dplyr)
setwd("~/Documents/git/springfreeze/")
source('scripts/stan/savestan.R')
dx<-read.csv("output/fakedata_dvr.csv", header=TRUE)
dxb <- dx[!is.na(dx$risk),]
fit1<-stan_glmer(risk~photo+chill1+warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|species), data=dxb)
fit1<-stan_glm(risk~photo, data=dxb)
View(dx)
fit1<-stan_glmer(risk~ photo + chill1 + warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|sp), data=dxb)
fit1
pp_check(fit1)
pp_check(fit1, stat = "max"))
pp_check(fit1, stat = "max")
ppc_stat(y, yrep, stat=c("mean", "sd", "q25", "q75"))
y<-example_y_data(fit1)
y<-example_y_data(dxb$risk)
yrep<-example_yrep_draws(dxb$risk)
y<-example_y_data(dxb)
ppc_stat(fit1 stat=c("mean", "sd", "q25", "q75"))
ppc_stat(fit1, stat=c("mean", "sd", "q25", "q75"))
pp_check(fit1, stat=c("mean", "sd", "q25", "q75"))
pp_check(fit1, type="hist")
pp_check(fit1, check="test", test="max")
pp_check(fit1, check="test", test="sd")
rstanarm::pp_check(fit1, check="test", test="sd")
test_mean <- pp_check(fit1, check = "test", test = "mean")
pp_check(fit1, plotfun = "hist", test = c("mean", "sd"))
pp_check(fit1, plotfun = "hist", stat = c("mean", "sd"))
pp_check(fit1, stat = c("min", "max"))
bayesplot::pp_check(fit1, stat = "max")
rstanarm::pp_check(fit1, stat = "max")
install.packages("revdbayes")
library(revdbayes)
install.packages("revdbayes")
dx<-read.csv("output/dvrdata_danf.csv", header=TRUE)
# Prep
dx<-dx%>%filter(species!="VIBCAS")%>%filter(species!="VIBLAN")
dx$sp <- as.numeric(as.factor(dx$sp))
dx$site <- as.numeric(as.factor(dx$site))
dx$risk<-dx$lday-dx$bday
dx<-dx[!is.na(dx$risk),]
dx$chill<-dx$chilling
levels(dx$warm) = c(0,1); levels(dx$photo) = c(0, 1); levels(dx$chill) = 1:3; levels(dx$site) = 1:2
dx$warm <- as.numeric(dx$warm)
dx$photo <- as.numeric(dx$photo)
dx$chill <- as.numeric(dx$chill)
dx$site<- as.numeric(dx$site)
# Chill dummy variables
dx$chill1 = ifelse(dx$chill == 1, 1, 0)
dx$chill2 = ifelse(dx$chill == 2, 1, 0)
with(dx, table(chill1, chill2)) # all three levels in here
dxb <- dx[!is.na(dx$risk),]
unique(dxb$site)
dxb$site[dxb$site==1] <- 0
dxb$site[dxb$site==2] <- 1
unique(dxb$chill1)
unique(dxb$chill2)
risk = dxb$risk # dvr as response
warm = as.numeric(dxb$warm)
site = as.numeric(dxb$site)
sp = as.numeric(dxb$sp)
photo = as.numeric(dxb$photo)
chill1 = as.numeric(dxb$chill1)
chill2 = as.numeric(dxb$chill2)
N = length(risk)
n_sp = length(unique(dxb$sp))
n_site = length(unique(dxb$site))
datalist.b<-list(risk=risk, warm=warm, site=site, sp=sp, photo=photo, chill1=chill1, chill2=chill2, N=N, n_sp=n_sp, n_site=n_site)
fit1<-stan_glmer(risk~ photo + chill1 + warm +chill2+site+photo:warm+photo:chill1+photo:chill2 + photo:site+
warm:chill1+warm:chill2+warm:site+chill1:site+chill2:site+ (1|sp), data=dxb)
launch_shinystan(fit1)
plot(fit1, par="betas")
plot(fit1, pars="beta")
View(dxb)
fit1
fit1<-stan_glmer(risk~ photo + chill1 + warm +chill2+photo:warm+photo:chill1+photo:chill2+
warm:chill1+warm:chill2+ (1|sp), data=dxb)
fit1
plot(fit1, pars="beta")
