bday <- c(bday, bdax)
lday <- c(lday, ldax)
fday <- c(fday, fdax)
}
# merging with unique id data
dx <- d[match(levels(d$id), d$id),] # with twig id in same order as the loop above
dx <- dx[,2:ncol(dx)]
dx <- data.frame(dx, lday, fday, bday, nl)
# Clean up levels for the treatment factors. Default is alphabetical, here want to sort in a meaningful way.
# levels(dx$treatcode) <- c(2,1,4,3)
# dx$treatcode <- as.factor(dx$treatcode)
# levels(dx$treatcode) <- c("Cool-short","Cool-long","Warm-short","Warm-long")
dx$photo <- as.factor(as.character(dx$photo))
levels(dx$photo) <- c('12', '08')
dx$photo <- as.factor(as.character(dx$photo))
dx$warm <- as.factor(as.character(dx$warm))
levels(dx$warm) <- c('15', '20')
dx$warm <- as.factor(as.character(dx$warm))
## Check issue: were long-day individuals later leafing out than short-day individuals? No.
aggregate(dx["lday"], dx[c("site", "warm", "photo")], FUN=mean, na.rm=T) #can replace lday with bday etc.
######## Additional calcuations:
# Calculating typical leafout day by species, across sites
setwd("~/Documents/git/buds/analyses")
dxx <- dx[dx$treatcode == "WL0",]
lday.agg <- aggregate(lday ~ sp, data = dxx, FUN = mean)
hist(lday.agg$lday)
lday.agg <- lday.agg[order(lday.agg$lday),]
plot(lday.agg$lday,
type = "n",
main = "Typical Leafout Day in WL0",
ylab = "Day")
text(1:nrow(lday.agg), lday.agg$lday,
labels = lday.agg$sp,
cex = 0.5, col = "midnightblue")
dev.print(device = pdf, file = "./graphs/Typical Leafout WL0.pdf", width = 10, height = 8)
########## Prep of species traits
tr <- read.xls("./input/Species Traits.xlsx")
tr$code = paste(toupper(substr(tr$Genus, 1, 3)), toupper(substr(tr$Species.1, 1, 3)), sep="")
library(Taxonstand)
trTPL <- TPL(tr$Species)
trTPL$code = paste(toupper(substr(trTPL$Genus, 1, 3)), toupper(substr(trTPL$Species, 1, 3)), sep="")
tr15 <- read.csv("./data/Summer 2015 Tree Traits.csv")
# input species level wood density, leaf N, and sla in
tr15$wd <- tr15$Stem.mass / tr15$Stem.volume
tr15$sla <- tr15$Leaf.area / tr15$Dry.mass
# exclude outliers
tr15$wd[tr15$wd >= mean(tr15$wd,na.rm=T)+sd(tr15$wd,na.rm=T)*2] = NA # 10 additional values
tr15$sla[tr15$sla >= mean(tr15$sla,na.rm=T)+sd(tr15$sla,na.rm=T)*2] = NA # 26 additional values
tr15$X.N[tr15$X.N >= mean(tr15$X.N,na.rm=T)+sd(tr15$X.N,na.rm=T)*2] = NA # 20 additional values
tragg <- aggregate(cbind(wd,sla,X.N) ~ Species, mean, data = tr15)
# Merge with wood density and TPL data
trall <- merge(trTPL, tragg, by.x = 'code', by.y = 'Species', all.x=T)
tr <- trall <- merge(trall, tr[,c("code","Pore.anatomy")], by = 'code', all.x=T)
write.csv(trall, file = "./input/Species Traits Taxonstand.csv")
# Read in phylogenetic data -- ??? Where is it? Get from Lizzie.
# for now using Phylomatic. Yup.
write.table(file="BudSp For Phylom.txt", data.frame(tr$Family, tr$New.Genus, paste(tr$New.Genus, tr$New.Species, sep="_")), sep= "/",row.names=F, quote=F, col.names=F)
tre <- read.tree('./input/budphylo3.new')
#phtree <- scan('./input/budphylo2.new', what = "character")
#phtre <- newick2phylog(phtree) # Convert it ade4 phylog class
#plot(phtre)
#ph <- as.phylo(phtre)
spnames <- tre$tip.label # Get species names
# as codes
spcode <- unlist(lapply(strsplit(spnames, "_"), function(x) toupper(paste(substr(x[[1]],1,3), substr(x[[2]],1,3), sep=""))))
ph <- drop.tip(tre, spnames[!spcode %in% unique(dx$sp)])
plot(ph, cex = 0.75)
# Drop one row with NA for site
d <- d[!is.na(d$site),]
dx <- dx[!is.na(dx$site),]
install.packages("gdata")
library("gdata", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
setwd("~/Documents/git/buds/analyses")
#d <- read.csv("Budburst.csv")
d1 <- read.xls("data/Budburst Datasheet 2015-05-15.xlsx") # read.xls function from gdata. Slow, but no intermediate step of saving as csv.
d2 <- read.xls("data/Budburst Datasheet 2015-05-15.xlsx", sheet = 2) # long format for consolidated treatments and chilling
# add relevant columns to d2 twigs
idx <- strsplit(as.character(d2$id), "_")
d2$site <- unlist(lapply(idx, function(x) x[2]))
d2$rep <- unlist(lapply(idx, function(x) x[3]))
d2$sp <- substr(unlist(lapply(idx, function(x) x[1])), 1, 6)
d2$gen <- substr(unlist(lapply(idx, function(x) x[1])), 1, 3)
d2$ind <- substr(d2$id, 1, 11)
d2$warm <- factor(substr(d2$treatcode, 1, 1), labels = c("cool", "warm"))
d2$photo <- factor(substr(d2$treatcode, 2, 2), labels = c("long", "short"))
d2$chill <- factor(substr(d2$treatcode, 3, 3), labels = c("chill0", "chill1", "chill2"))
coltokeep <- c("Date","id","sp","rep","site","ind","treatcode","warm","photo","chill","gen","Term.fl","Lat.fl","Term.lf","Lat.lf","Comments","Observer")
d <- rbind(d1[coltokeep], d2[coltokeep])
# Format date, making a continuous day since beginning of experiment. * For chill, this is from the first day after taken out of chilling! *
d$Date <- strptime(d$Date, "%Y-%m-%d")
day0 <- as.numeric(format(d$Date, "%j"))
# from min(d$Date)
d$day <- day0 - as.numeric(format(strptime("2015-02-06", "%Y-%m-%d"), "%j")) + 1
# see min(d[d$chill=="chill1","Date"]), but actual initiation was March 11, see budburst protocol
d$day.chill <- day0 - as.numeric(format(strptime("2015-03-11", "%Y-%m-%d"), "%j")) + 1
d$dayuse <- ifelse(d$chill == "chill0", d$day, d$day.chill)
# order by date
d <- d[order(d$Date, d$id, d$treatcode),]
# typical difference in date by treatment
for(i in levels(d$treatcode)){
datediff <- diff(d[d$treatcode == i,"Date"])
cat(rep("<>", 20), "\n", i, "\n")
print(summary(unclass(datediff[datediff!=0]/60/60/24)))
}
# Cleanup: fix data types (slashes and other characters in the phenostage columns), date format
names(d)
# make continuous data, now using second value if something is split by slash
d$tleaf <- unlist(lapply(strsplit(as.character(d$Term.lf), "/"), function(x) ifelse(length(x)>1, x[2], x[1])))
d$lleaf <- unlist(lapply(strsplit(as.character(d$Lat.lf), "/"), function(x) ifelse(length(x)>1, x[2], x[1])))
# and use first values if comma. This is a sequential manipulation, after slash data have been modified.
d$tleaf <- unlist(lapply(strsplit(as.character(d$tleaf), ", "), function(x) ifelse(length(x)>1, x[1], x[1])))
d$lleaf <- unlist(lapply(strsplit(as.character(d$lleaf), ", "), function(x) ifelse(length(x)>1, x[1], x[1])))
# finally, make non-numeric data into NA
for(i in c("tleaf","lleaf","Term.fl","Lat.fl")){
d[,i][d[,i] =="-"] = NA
d[,i][d[,i] ==""] = NA
d[,i][d[,i] =="*"] = NA
}
d$lleaf <- sub("\\*", "", d$lleaf) # get rid of one asterix after 4*
# Make into numeric data, needed because it was read in with weird characters and automaticially made into factors
for(i in c("tleaf","lleaf","Term.fl","Lat.fl")){
d[,i] = as.numeric(as.character(d[,i])) }
# calculating day since initiation of experiment, by twig id (includes treatment). Tricky part: what should NA be? They still haven't reached stage 6... for this calculation, I put them as 75.
#
# For chill treatments, count days since they started in chambers, not since chill0 started
# now adding vector nl for 0 if non-leafout, 1 if leafout.
bday <- lday <- fday <- nl <- vector()
for(i in levels(d$id)){ # i=levels(d$id)[500] # for each individual clipping.
dx <- d[d$id == i,]
day.use <- ifelse(dx$chill[1] == "chill0", "day", "day.chill")
# 1. for both terminal and lateral buds, what is the max stage within a row. Identify which rows are greater or equal to the specific BBCH stage
# 2. now for that individual, find the earliest day at which that stage was reached.
bdax <- which(apply(dx[,c("tleaf","lleaf")], 1, max, na.rm=T) >= 3)
if(length(bdax) < 1) bdax = NA else bdax = dx[min(bdax),day.use]
ldax <- which(apply(dx[,c("tleaf","lleaf")], 1, max, na.rm=T) >= 6)
if(length(ldax) < 1) {ldax = NA; nl <- c(nl, 0)} else {ldax = dx[min(ldax),day.use]; nl <- c(nl, 1)}
fdax <- which(apply(dx[,c("Term.fl","Lat.fl")], 1, max) > 16)
if(length(fdax) < 1) fdax = NA else fdax = dx[min(fdax),day.use]
bday <- c(bday, bdax)
lday <- c(lday, ldax)
fday <- c(fday, fdax)
}
# merging with unique id data
dx <- d[match(levels(d$id), d$id),] # with twig id in same order as the loop above
dx <- dx[,2:ncol(dx)]
dx <- data.frame(dx, lday, fday, bday, nl)
# Clean up levels for the treatment factors. Default is alphabetical, here want to sort in a meaningful way.
# levels(dx$treatcode) <- c(2,1,4,3)
# dx$treatcode <- as.factor(dx$treatcode)
# levels(dx$treatcode) <- c("Cool-short","Cool-long","Warm-short","Warm-long")
dx$photo <- as.factor(as.character(dx$photo))
levels(dx$photo) <- c('12', '08')
dx$photo <- as.factor(as.character(dx$photo))
dx$warm <- as.factor(as.character(dx$warm))
levels(dx$warm) <- c('15', '20')
dx$warm <- as.factor(as.character(dx$warm))
## Check issue: were long-day individuals later leafing out than short-day individuals? No.
aggregate(dx["lday"], dx[c("site", "warm", "photo")], FUN=mean, na.rm=T) #can replace lday with bday etc.
######## Additional calcuations:
# Calculating typical leafout day by species, across sites
setwd("~/Documents/git/buds/analyses")
dxx <- dx[dx$treatcode == "WL0",]
lday.agg <- aggregate(lday ~ sp, data = dxx, FUN = mean)
hist(lday.agg$lday)
lday.agg <- lday.agg[order(lday.agg$lday),]
plot(lday.agg$lday,
type = "n",
main = "Typical Leafout Day in WL0",
ylab = "Day")
text(1:nrow(lday.agg), lday.agg$lday,
labels = lday.agg$sp,
cex = 0.5, col = "midnightblue")
dev.print(device = pdf, file = "./graphs/Typical Leafout WL0.pdf", width = 10, height = 8)
########## Prep of species traits
tr <- read.xls("./input/Species Traits.xlsx")
tr$code = paste(toupper(substr(tr$Genus, 1, 3)), toupper(substr(tr$Species.1, 1, 3)), sep="")
library(Taxonstand)
trTPL <- TPL(tr$Species)
trTPL$code = paste(toupper(substr(trTPL$Genus, 1, 3)), toupper(substr(trTPL$Species, 1, 3)), sep="")
tr15 <- read.csv("./data/Summer 2015 Tree Traits.csv")
# input species level wood density, leaf N, and sla in
tr15$wd <- tr15$Stem.mass / tr15$Stem.volume
tr15$sla <- tr15$Leaf.area / tr15$Dry.mass
# exclude outliers
tr15$wd[tr15$wd >= mean(tr15$wd,na.rm=T)+sd(tr15$wd,na.rm=T)*2] = NA # 10 additional values
tr15$sla[tr15$sla >= mean(tr15$sla,na.rm=T)+sd(tr15$sla,na.rm=T)*2] = NA # 26 additional values
tr15$X.N[tr15$X.N >= mean(tr15$X.N,na.rm=T)+sd(tr15$X.N,na.rm=T)*2] = NA # 20 additional values
tragg <- aggregate(cbind(wd,sla,X.N) ~ Species, mean, data = tr15)
# Merge with wood density and TPL data
trall <- merge(trTPL, tragg, by.x = 'code', by.y = 'Species', all.x=T)
tr <- trall <- merge(trall, tr[,c("code","Pore.anatomy")], by = 'code', all.x=T)
write.csv(trall, file = "./input/Species Traits Taxonstand.csv")
# Read in phylogenetic data -- ??? Where is it? Get from Lizzie.
# for now using Phylomatic. Yup.
write.table(file="BudSp For Phylom.txt", data.frame(tr$Family, tr$New.Genus, paste(tr$New.Genus, tr$New.Species, sep="_")), sep= "/",row.names=F, quote=F, col.names=F)
tre <- read.tree('./input/budphylo3.new')
#phtree <- scan('./input/budphylo2.new', what = "character")
#phtre <- newick2phylog(phtree) # Convert it ade4 phylog class
#plot(phtre)
#ph <- as.phylo(phtre)
spnames <- tre$tip.label # Get species names
# as codes
spcode <- unlist(lapply(strsplit(spnames, "_"), function(x) toupper(paste(substr(x[[1]],1,3), substr(x[[2]],1,3), sep=""))))
ph <- drop.tip(tre, spnames[!spcode %in% unique(dx$sp)])
plot(ph, cex = 0.75)
# Drop one row with NA for site
d <- d[!is.na(d$site),]
dx <- dx[!is.na(dx$site),]
forlatex = TRUE # set to FALSE if just trying new figures, TRUE if outputting for final
runstan = TRUE # set to TRUE to actually run stan models. FALSE if loading from previous runs
# Analysis of bud burst experiment 2015.
library(memisc) # for getSummary
library(xtable)
library(scales) # for alpha
library(ggplot2)
library(caper) # for pgls
library(png) # readPNG for Fig 1
setwd("~/Documents/git/projects/treegarden/budexperiments/analyses")
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# get latest .Rdata file
# To run from saved stan output (exclude Fake data output)
if(!runstan) {
realout <- dir()[grep("Stan Output", dir())[is.na(match(grep("Stan Output", dir()), grep("Fake", dir())))]]
if(!exists("doym.b")) load(sort(realout, T)[1]) # only run if stan output file is not yet in working memory.
# launch_shinystan(doym.l)
}
if(runstan){ # things needed only if running the stan models
library(rstan)
library(shinystan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('stan/savestan.R')
}
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
(toload <- sort(dir("./input")[grep("Budburst Data", dir('./input'))], T)[1])
load(file.path("input", toload))
if(forlatex) figpath = "../docs/ms/images" else figpath = "graphs"
# Prep
dx$spn <- as.numeric(dx$sp)
levels(dx$warm) = c(0,1); levels(dx$photo) = c(0, 1); levels(dx$site) = 1:2; levels(dx$chill) = 1:3
dx$warm <- as.numeric(dx$warm)
dx$photo <- as.numeric(dx$photo)
dx$chill <- as.numeric(dx$chill)
dx$site <- as.numeric(dx$site)
# Chill dummy variables
dx$chill1 = ifelse(dx$chill == 2, 1, 0)
dx$chill2 = ifelse(dx$chill == 3, 1, 0)
with(dx, table(chill1, chill2)) # all three levels in here
dxb <- dx[!is.na(dx$bday),]
dxl <- dx[!is.na(dx$lday),]
bdaymean <- t(with(dxb, tapply(bday, list(site, sp), mean, na.rm=T)))
ldaymean <- t(with(dxl, tapply(lday, list(site, sp), mean, na.rm=T)))
leafoutdays <- data.frame(bdaymean, ldaymean)
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Utility function to plot 'random effects' from stan output - used now mostly in Fig 3.
plotlet <- function(x, y, xlab=NULL, ylab=NULL, data, groups = NULL, ...){
if(is.null(xlab)) xlab = x; if(is.null(ylab)) ylab = y
if(is.null(groups)) { col.pch = "black"; col.lines = "grey50" }
else {
colz = c("brown", "blue3")
ccolz = rep(colz[1], length(groups))
ccolz[groups == 2] = colz[2]
col.pch = ccolz
col.lines = alpha(ccolz, 0.4)
}
plot(
data[grep(paste(x,"\\[",sep=""), rownames(data)),1],
data[grep(paste(y,"\\[",sep=""), rownames(data)),1],
pch = "+",
ylab = ylab,
xlab = xlab,
col = col.pch,
...
)
abline(h=0, lty = 3, col = "grey60")
abline(v=0, lty = 3, col = "grey60")
arrows(
data[grep(paste(x,"\\[",sep=""), rownames(data)),"mean"],
data[grep(paste(y,"\\[",sep=""), rownames(data)),"mean"]-data[grep(paste(y,"\\[",sep=""), rownames(data)),"se_mean"],
data[grep(paste(x,"\\[",sep=""), rownames(data)),"mean"],
data[grep(paste(y,"\\[",sep=""), rownames(data)),"mean"]+data[grep(paste(y,"\\[",sep=""), rownames(data)),"se_mean"],
length = 0, col = col.lines)
arrows(
data[grep(paste(x,"\\[",sep=""), rownames(data)),"mean"]-data[grep(paste(x,"\\[",sep=""), rownames(data)),"se_mean"],
data[grep(paste(y,"\\[",sep=""), rownames(data)),"mean"],
data[grep(paste(x,"\\[",sep=""), rownames(data)),"mean"]+data[grep(paste(x,"\\[",sep=""), rownames(data)),"se_mean"],
data[grep(paste(y,"\\[",sep=""), rownames(data)),"mean"],
length = 0, col = col.lines)
# match with species names
text( data[grep(paste(x,"\\[",sep=""), rownames(data)),1],
data[grep(paste(y,"\\[",sep=""), rownames(data)),1],
sort(unique(dx$sp)),
cex = 0.5,
pos = 3,
col = col.pch)
}
# Groups
colz = c("brown", "blue3")
shrubs = c("VIBLAN","RHAFRA","RHOPRI","SPIALB","VACMYR","VIBCAS", "AROMEL","ILEMUC", "KALANG", "LONCAN", "LYOLIG")
trees = c("ACEPEN", "ACERUB", "ACESAC", "ALNINC", "BETALL", "BETLEN", "BETPAP", "CORCOR", "FAGGRA", "FRANIG", "HAMVIR", "NYSSYL", "POPGRA", "PRUPEN", "QUEALB" , "QUERUB", "QUEVEL")
treeshrub = levels(dx$sp)
treeshrub[treeshrub %in% shrubs] = 1
treeshrub[treeshrub %in% trees] = 2
treeshrub = as.numeric(treeshrub)
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# Analyses:
# 1. Day of bud burst by all factors, stan
# 2. Day of leaf out by all factors, stan
# 3. Effects on bud burst/leaf-out day for species:
#  - Traits (wood density, sla, N, stomata when we have it),
#  - Phylogeny
# Supplemental analyses
# Correlate order of leaf-out/bud burst in chambers to each other
# Correlate order of leaf-out in chambers to O'Keefe observational data
# <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <> <>
# 1. Budburst day.
if(runstan){
datalist.b <- list(lday = dxb$bday, # bud burst as response
warm = as.numeric(dxb$warm),
site = as.numeric(dxb$site),
sp = as.numeric(dxb$sp),
photo = as.numeric(dxb$photo),
chill1 = as.numeric(dxb$chill1),
chill2 = as.numeric(dxb$chill2),
N = nrow(dxb),
n_site = length(unique(dxb$site)),
n_sp = length(unique(dxb$sp))
)
doym.b <- stan('stan/lday_site_sp_chill_inter.stan',
data = datalist.b, iter = 6006, chains = 4,
control = list(adapt_delta = 0.9,
max_treedepth = 15))
}
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(data.table)
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
View(d)
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(site == "HF")
d<-na.omit(d)
View(d)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx) %>%
d<-na.omit(d)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
d<-na.omit(d)
View(d)
d$species<-substr(ind, 1, 6)
d$species<-substr(d$ind, 1, 6)
View(d)
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
d<-na.omit(d)
d$species<-substr(d$ind, 1, 6)
d<-d%>%unite(ID, sp, treatcode, sep="_")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
d<-na.omit(d)
d$species<-substr(d$ind, 1, 6)
df<-d%>%unite(ID, species, treatcode, sep="_")
df$mean<-ave(df$bday, df$ID)
df$sd<-ave(df$bday, df$ID, FUN=sd)
df$mean.leaf<-ave(df$lday, df$ID)
df$sd.leaf<-ave(df$lday, df$ID, FUN=sd)
View(df)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=basic$Budburst, col="royalblue4")) +
geom_point(aes(x=basic$Leaves, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=df$bday, col="royalblue4")) +
geom_point(aes(x=df$lday, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
d<-na.omit(d)
d$species<-substr(d$ind, 1, 6)
df<-d%>%unite(ID, species, treatcode, sep="_")
df$mean<-ave(df$bday, df$ID)
df$sd<-ave(df$bday, df$ID, FUN=sd)
df$mean.leaf<-ave(df$lday, df$ID)
df$sd.leaf<-ave(df$lday, df$ID, FUN=sd)
df<-df%>%
arrange(ID)%>%
filter(row_number()==1)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=df$bday, col="royalblue4")) +
geom_point(aes(x=df$lday, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
df<-d%>%unite(ID, species, treatcode, sep="_")
df$mean<-ave(df$bday, df$ID)
df$sd<-ave(df$bday, df$ID, FUN=sd)
df$mean.leaf<-ave(df$lday, df$ID)
df$sd.leaf<-ave(df$lday, df$ID, FUN=sd)
df<-df%>%
group_by(species, ID)%>%
arrange(ID)%>%
filter(row_number()==1)
df<-df%>%
group_by(mean, ID)%>%
arrange(ID)%>%
filter(row_number()==1)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=df$bday, col="royalblue4")) +
geom_point(aes(x=df$lday, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
d<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
d<-na.omit(d)
d$species<-substr(d$ind, 1, 6)
d<-d%>%filter(species!="VIBCAS")%>%filter(species!="VIBLAN") # all entries for two species have the same budburst and leafout day, removed because probably from error
df<-d%>%unite(ID, species, treatcode, sep="_")
df$mean<-ave(df$bday, df$ID)
df$sd<-ave(df$bday, df$ID, FUN=sd)
df$mean.leaf<-ave(df$lday, df$ID)
df$sd.leaf<-ave(df$lday, df$ID, FUN=sd)
df<-df%>%
group_by(mean, ID)%>%
arrange(ID)%>%
filter(row_number()==1)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=df$bday, col="royalblue4")) +
geom_point(aes(x=df$lday, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(data.table)
# Set Working Directory
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
########### NEW EDITION - CAT 17 APRIL 2017 ####################
tx<-c("CS0", "WL1")
dx<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
dx<-na.omit(dx)
dx$species<-substr(dx$ind, 1, 6)
dx<-dx%>%filter(species!="VIBCAS")%>%filter(species!="VIBLAN") # all entries for two species have the same budburst and leafout day, removed because probably from error
df<-dx%>%unite(ID, species, treatcode, sep="_")
df$mean<-ave(df$bday, df$ID)
df$sd<-ave(df$bday, df$ID, FUN=sd)
df$mean.leaf<-ave(df$lday, df$ID)
df$sd.leaf<-ave(df$lday, df$ID, FUN=sd)
df<-df%>%
group_by(mean, ID)%>%
arrange(ID)%>%
filter(row_number()==1)
ts.timeline<-ggplot((df), aes(x=bday, y=ID), stat="identity") +
geom_point(aes(x=df$bday, col="royalblue4")) +
geom_point(aes(x=df$lday, col="forestgreen"))  +
xlab("Day of Year") +scale_color_manual(labels = c("Leafout","Budburst"), values = c("forestgreen","royalblue4")) +
ylab("Species") +geom_errorbarh(aes(xmin=bday-sd, xmax=bday+sd, col="royalblue4"), height=.0) +
geom_errorbarh(aes(xmin=lday-sd.leaf, xmax=lday+sd.leaf, col="forestgreen"), height=.0)
plot(ts.timeline)
View(d)
