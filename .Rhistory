<<<<<<< Updated upstream
m <- c(m, year.i)
}
return(m)
}
leap.years<-as.data.frame(leaps(1))
leap.years<-leap.years[!duplicated(leaps(1)),]
#year<-1950:2016
empty.raster<-raster1[[1]]
num.false.spring.year<-list()
#dates.false.spring<-list()
for(i in 1951:1983){#i=1952
print(i)
year.i<-i
is.leap<-ifelse(year.i%in%leap.years,TRUE,FALSE)
sequence.years<-which(year==year.i)
#length(sequence.years)
raster.sub<-subset(raster1,sequence.years)
#numnonas<-sum(!is.na(values(raster.sub[[1]])))
rast.array<-array(75,dim=c(ncell(raster.sub),181))
if(is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array[,j]<-values(raster.sub[[j]])
}
}
if(!is.leap){
for(j in 75:181){ ## you need to change
print(paste(year.i,j))
rast.array[,j]<-values(raster.sub[[j]])
}
}
#dates.fs<-apply(rast.array, 1, function(x){ifelse(x<=-2.2, x, 0)})
num.false.spring<-apply(rast.array,1,function(x){sum(ifelse(x<=-2.2,1,0))})
non.nas.ids<-which(!is.na(num.false.spring))
#values(emp.rast)<-NA
values(empty.raster)<- NA
#non.nas.dates<-which(!is.na(dates.fs))
#plot(raster1[[1]])
values(empty.raster)[non.nas.ids]<- num.false.spring[!is.na(num.false.spring)]
#values(empty.raster)[non.nas.dates]<- dates.fs[!is.na(dates.fs)]
#plot(empty.raster)
#dates.false.spring[[i]]<- empty.raster
num.false.spring.year[[i]]<-empty.raster
}
length(num.false.spring.year)
final.raster.preCC<-stack(unlist(num.false.spring.year))
summed.false.springs.preCC<-calc(final.raster.preCC,sum)
fs.years.pre<-calc(final.raster.preCC, function(x) {sum(ifelse(x>=1,1,0))})
writeRaster(fs.years.pre,"~/Documents/git/regionalrisk/analyses/output/fs.30.pre", bylayer=TRUE,format="GTiff")
install.packages("gdal")
library(gdal)
library(rgdal)
install.packages("gdalUtils")
library("gdalUtils", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgeos", repos = "http://R-Forge.R-project.org", type = "source")
library(rgeos)
install.packages("rgdal", repos="http://R-Forge.R-project.org", type="source")
install.packages("rgdal", type="source")
library(rgdal)
install.packages('rgdal',repos="http://www.stats.ox.ac.uk/pub/RWin")
rgdal::writeRaster(fs.years.post,"~/Documents/git/regionalrisk/analyses/output/fs.postCC", bylayer=TRUE,format="GTiff")
install.packages("rgeos", type="source")
install.packages("rgeos", type = "source")
install.packages("rgeos", repos="http://R-Forge.R-project.org", type="source")
install.packages(c('rgdal','rgeos'),repos="http://www.stats.ox.ac.uk/pub/RWin")
library("rgeos", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rgeos", unload=TRUE)
install.packages("rgdal")
install.packages("installr")
updateR()
install.packages("updateR")
version
if(!require(installr)) {
install.packages("installr");
require(installr)
}
library(installr)
version
version
update.packages()
=======
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2,
labels=c("A","B"))
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme((legend.position = position), labels=c("A","B")))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme((legend.position="none"), labels=c("A","B")))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right"), labels = c("A","B")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
labels = c("A", "B"),
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map
plot2 <- eur.map
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
install.packages("cowplot")
library(cowplot)
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=False.Springs, color=False.Springs)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  +
guides(size=FALSE)
plot2 <- eur.map
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
legend <- get_legend(eur.map)
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.3, 2.3, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B"))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8), labels = c("A", "B", ""))
grid.arrange(am.map, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.arrange(am.map, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, plot2, labels=c("A", "B"), ncol = 2, nrow = 1)
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2, labels = c("A", "B"),
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
>>>>>>> Stashed changes
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
### The power of Sunny Delight
## Kids who drink sunny d at a young age are more likely to be happier adults
## In our example, if a child drinks 1 bottle of sunny d a week at the age of 5,
# then the amount of dopamine in the brain increases in adulthood.
## The average adult has 45+/-5 ng/ml of dopamine, but kids who drink sunny d
# increase that level to 55 ng/ml
## The first study tests 1000 kids
library(arm)
<<<<<<< Updated upstream
packs = as.data.frame(installed.packages(.libPaths()[1]), stringsAsFactors = FALSE)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
install.packages(packs$Package)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(rstanarm)
library(arm)
install.packages(c("dplyr", "tidyr", "rstan", "rstanarm", "arm", "cowplot"))
install.packages(c("ggplot2", "shinystan", "bayesplot"))
install.packages(c("lubridate", "xtable", "stargazer", "gridExtra", "grid"))
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(rstanarm)
library(arm)
library(cowplot)
setwd("~/Documents/git/springfreeze")
timeline<-read.csv("input/hf003-06-mean-spp.csv", header=TRUE)
weather<-read.csv("input/WeatherData.csv", header=TRUE)
hf<-timeline[!is.na(timeline$l75.jd),]
spp<-as.data.frame(table(hf$species))
spp$include<-ifelse(spp$Freq==25, TRUE, NA)
spp<-spp[!is.na(spp$include),]
sp<-unique(spp$Var1)
d<-timeline%>%
dplyr::select(year, species, bb.jd, l75.jd) %>%
filter(species%in%sp)
d$year<-as.numeric(d$year)
d$risk<-d$l75.jd-d$bb.jd
d<-na.omit(d)
df<-d%>%
gather("phenophase", "doy", bb.jd, l75.jd)
x<-paste(df$year, df$doy)
df$Date<-as.Date(strptime(x, format="%Y %j"))
## Weather data
w<-weather %>%
filter(Site == "hf")%>%
filter(JD<=180)
w$AirT<-ifelse(is.na(w$AirT), 0, w$AirT)
w$gdd <- w$AirT - 5
w$gdd <-ifelse(w$gdd>0, w$gdd, 0)
w$count <- ave(
w$gdd, w$Year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
w<-dplyr::rename(w, year=Year)
w<-dplyr::rename(w, doy=JD)
x<-paste(w$year, w$doy)
w$Date<-as.Date(strptime(x, format="%Y %j"))
w<-w[!is.na(w$AirTMin),]
w$frz<-ifelse(w$AirTMin<0, 1, 0)
w$freezes<-ave(
w$frz, w$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
=======
library(ggplot2)
library(gridExtra)
## What is the effect size in this example?
ES = (55-45)/5 ## ES = 2
SE = 5/(sqrt(10)) ## SE = 0.16
## What about when we triple the effect size?
ES = (75-45)/5 ## ES = 6
SE = 5/(sqrt(10)) ## SE stays the same
## How about when we triple the sample size?
ES = (55-45)/5 ## ES is 2 like before but...
SE = 5/(sqrt(30)) ## SE decreases slightly - SE = 0.09
### Andrew states that " it is generally better to double the effect size [theta] than to double the sample size [n]"
## here we can see that doubling the sample size decreases the standard error at a slower rate than doubling the effect size
# The SE: effect size influences the numerator, sample size influences the denominator
nsunny = 2
rep = 5
ntot = nsunny*rep
sunny = gl(nsunny, rep, length=ntot)
sunnydiff = 10
sunnydiff.sd = 0
suns<-rnorm(ntot, 55, 5)
base <- 45
child <- base + suns-mean(suns)
mm <- model.matrix(~(sunny)^2, data.frame=(sunny))
fake <- vector()
for (i in 1:length(ntot)){
coeff <- c(child[i],
rnorm(1, sunnydiff, sunnydiff.sd)
>>>>>>> Stashed changes
)
dp <- rnorm(n = length(sunny), mean = mm %*% coeff, sd = 5)
fake <- data.frame(dp=dp, sunny=sunny)
}
hist(fake$dp[sunny==1])
hist(fake$dp[sunny==2])
mean(fake$dp) # 50.5
sd(fake$dp) # 7.24
display(lm(dp~sunny, data=fake))
#lm(formula = dp ~ sunny, data = fake)
#coef.est coef.se
#(Intercept) 45.33     0.23
#sunny2      10.25     0.32
#---
#  n = 1000, k = 2
#residual sd = 5.11, R-Squared = 0.50
### Alright, now let's triple the effect size...
### Sunny D increases the level of dopamine to 75 ng/ml - we'll keep the sample size the same
nsunny.e = 2
rep.e = 5
ntot.e = nsunny.e*rep.e
sunny.e = gl(nsunny.e, rep.e, length=ntot.e)
sunnydiff.e = 30
sunnydiff.sd.e = 0
suns.e<-rnorm(ntot.e, 75, 5)
base.e <- 45
child.e <- base.e + suns.e-mean(suns.e)
mm.e <- model.matrix(~(sunny.e)^2, data.frame=(sunny.e))
fake.e <- vector()
for (i in 1:length(ntot.e)){
coeff.e <- c(child.e[i],
rnorm(1, sunnydiff.e, sunnydiff.sd.e)
)
dp.e <- rnorm(n = length(sunny.e), mean = mm.e %*% coeff.e, sd = 5)
fake.e <- data.frame(dp.e=dp.e, sunny.e=sunny.e)
}
<<<<<<< Updated upstream
#gdd$z.agdd<-scale(gdd$agdd, center=TRUE, scale=FALSE)
#gdd$z.bb<-scale(gdd$bb.jd, center=TRUE, scale=FALSE)
#gdd$z.year<-scale(gdd$year, center=TRUE, scale=FALSE)
#gdd$z.risk<-scale(gdd$risk, center=TRUE, scale=FALSE)
#gdd$z.bbgdd<-scale(gdd$bb.gdd, center=TRUE, scale=FALSE)
#gdd$mean<-ave(gdd$bb.jd, gdd$year)
#gdd$z.mean<-scale(gdd$mean, center=TRUE, scale=FALSE)
#gdd$m.risk<-ave(gdd$risk, gdd$year)
dg<-dplyr::select(gdd, -z.agdd, -z.bb, -z.year, -z.risk, -z.bbgdd)
dg$mean<-ave(dg$bb.jd, dg$year)
#mod1<-stan_glm(risk~agdd+mean, data=gdd)
#mod1
#plot(mod1, pars="beta")
avg<-dplyr::select()
#gdd$year<-as.numeric(gdd$year)
#m1<-lm(m.risk~year, data=gdd)
#display(m1)
#m2<-lm(risk~bb.jd, data=gdd)
#display(m2)
#m3<-lm(agdd~risk+bb.jd, data=gdd)
#display(m3)
years<-c("1997", "2012")
ggplot(gdd, x=species, y=bb.gdd) + geom_boxplot(aes(x=species, y=bb.gdd))
gdd$mean<-ave(gdd$bb.gdd, gdd$year)
w.yr<-w%>%
filter(year%in% years)%>%
dplyr::select(year, doy, AirTMin)%>%
filter(doy>=110)%>%
filter(doy<=172)
w.yr$fs<-ifelse(w.yr$AirTMin<=-2, w.yr$AirTMin, NA)
w.yr<-w.yr[!is.na(w.yr$fs),]
gdd.yr<-filter(gdd, year%in%years)
gdd$ord<- reorder(gdd$species, gdd$risk)
gdd.yr$code <- reorder(gdd.yr$species, gdd.yr$year)
gdd.yr$ord<- reorder(gdd.yr$code, gdd.yr$bb.jd)
gdd.yr$m.risk<-ave(gdd.yr$risk, gdd.yr$year)
hf<-ggplot(gdd.yr, aes(x=ord,ymin = bb.gdd, ymax = l75.gdd, group=interaction(species, year) )) +
geom_point(aes(y=bb.gdd, col="forestgreen"), position = position_dodge(.5)) + geom_point(aes(y=l75.gdd, col="darkgreen"), position = position_dodge(.5)) +
geom_linerange(aes(x=ord,ymin = bb.gdd, ymax = l75.gdd, col=factor(year)), position=position_dodge(.5)) +  ylab("GDDs")  +
scale_color_manual(labels = c("1997","2012", "Leafout GDD", "Budburst GDD"),
values = c("#F8766D","#00BFC4", "green4", "darkolivegreen3")) +
xlab("Species") +coord_flip() + labs(color="Phenophase and Year")+ geom_hline(yintercept=196, color="#00BFC4", linetype=2)
plot(hf)
hf.bb<-ggplot(gdd.yr, aes(x=ord,ymin = bb.jd, ymax = l75.jd, group=interaction(species, year) )) +
geom_point(aes(y=bb.jd, col="forestgreen"), position = position_dodge(.5)) + geom_point(aes(y=l75.jd, col="darkgreen"), position = position_dodge(.5)) +
geom_linerange(aes(x=ord,ymin = bb.jd, ymax = l75.jd, col=factor(year)), position=position_dodge(.5)) +  ylab("Day of Year") +
scale_color_manual(labels = c("1997","2012", "Leafout", "Budburst"), values = c("#F8766D","#00BFC4", "green4", "darkolivegreen3")) +
xlab("Species") +coord_flip() + labs(color="Phenophase and Year")  +
geom_hline(yintercept=120, color="#00BFC4", linetype=2) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.justification = c(1,1), legend.text = element_text(size=10))
plot(hf.bb)
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=6)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
gdd$m.bb <- ave(gdd$bb.gdd, gdd$year)
bbg<-dplyr::select(gdd, year, m.bb)
bbg<-bbg[!duplicated(bbg),]
bbg<- bbg[order(bbg$year), ]
bbg$colors<- c("gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","gray70", "gray70", "gray70", "gray70", "gray70", "gray70",
"gray70","firebrick4", "gray70", "gray70")
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=6)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
ggdraw() +
draw_plot(hf.bb + theme(legend.justification = "bottom"), 0, 0, 1, 1) +
draw_plot(hist  +
theme(legend.justification = c("bottom", "right")), 1.2, 1.24, 0.5, 0.4) +
draw_plot_label(c("A", "B"), c(0, 0.5), c(1, 0.92), size = 15)
ggdraw() +
draw_plot(hf.bb + theme(legend.justification = "bottom"), 0, 0, 1, 1) +
draw_plot(hist  +
theme(legend.justification = "bottom"), 1.2, 1.24, 0.5, 0.4) +
draw_plot_label(c("A", "B"), c(0, 0.5), c(1, 0.92), size = 15)
ggdraw() +
draw_plot(hf.bb + theme(legend.justification = "top"), 0, 0, 1, 1) +
draw_plot(hist  +
theme(legend.justification = "bottom"), 1.2, 1.24, 0.5, 0.4) +
draw_plot_label(c("A", "B"), c(0, 1.2), c(1, 0.5), size = 15)
ggdraw() +
draw_plot(hf.bb + theme(legend.justification = "top"), 0, 0, 1, 1) +
draw_plot(hist  +
theme(legend.justification = "bottom"), 1, 1, 0.5, 0.4) +
draw_plot_label(c("A", "B"), c(0, 1.2), c(1, 0.5), size = 15)
plot_grid(hf.bb, hist, labels = c('A', 'B'), align = 'h', rel_widths = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), rel_widths = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), rel_widths = c(1, 0.3), rel_heights = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), rel_widths = c(1, 0.3), rel_heights = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), align="v",
rel_widths = c(1, 0.3), rel_heights = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), align="h",
rel_widths = c(1, 0.3), rel_heights = c(1, 0.3))
plot_grid(hf.bb, hist, labels = c('A', 'B'), align="h",
rel_widths = c(3, 1), rel_heights = c(3, 1))
plot_grid(hf.bb, hist, labels = c('A', 'B'), align="h", scale=c(3, 1))
plot_grid(hf.bb, hist, labels = c('A', 'B'), align="h", scale=c(1, 0.3))
vp <- viewport(width = 0.3, height = 0.3, x = 1.05,
y = unit(2, "lines"), just = c("right",
"bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
library(grid)
vp <- viewport(width = 0.3, height = 0.3, x = 1.05,
y = unit(2, "lines"), just = c("right",
"bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
vp <- viewport(width = 0.2, height = 0.2, x = 1,
y = unit(2, "lines"), just = c("right",
"bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
vp <- viewport(width = 0.2, height = 0.2, x = 1,
y = unit(3, "lines"), just = c("right","bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
vp <- viewport(width = 0.3, height = 0.3, x = 0.95,
y = unit(4, "lines"), just = c("right","bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=6), legend.key.size = element_rect(size=6)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=6), legend.key.size = element_rect(size=0.5)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=6), legend.key.size = unit(0.5, "cm")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.15,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.text=element_text(size=10), legend.title = element_text(size=10)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.text=element_text(size=10), legend.title = element_text(size=10)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist
vp <- viewport(width = 0.3, height = 0.3, x = 0.99,
y = unit(4, "lines"), just = c("right","bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.text.x=element_text(size=10), legend.title = element_text(size=10), axis.text.y=element_text(size=10)) +
xlab("Mean GDDs for Budburst") + ylab("Frequency")
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.text.x=element_text(size=10), legend.title = element_text(size=10), axis.text.y=element_text(size=10))
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.text.x=element_text(size=8), legend.title = element_text(size=8), axis.text.y=element_text(size=10))
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
legend.title = element_text(size=8)) + geom_text(font=10)
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
legend.title = element_text(size=8)) + geom_text(size=10)
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title.x=element_text(size=8), legend.title = element_text(size=8), axis.title.y=element_text(size=10))
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title.x=element_text(size=12), legend.title = element_text(size=8), axis.title.y=element_text(size=12))
hist
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.title=element_text(size=10))
hist<-ggplot(bbg, aes(x=m.bb)) + geom_histogram(aes(fill=colors), binwidth = 20, color="gray30", size=0.3) +
scale_fill_manual(values=c("firebrick4", "gray70"), name="Year",
labels=c("1997 & 2012","Other Years")) +
xlab("Mean GDDs for Budburst") + ylab("Frequency") +
theme(panel.background = element_blank(), axis.line = element_line(colour = "black"),
legend.position = c(0.05,0.85), legend.text = element_text(size=8), legend.key.size = unit(0.5, "cm"),
axis.title=element_text(size=12), legend.title = element_text(size=8), axis.text=element_text(size=10))
hist
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
vp <- viewport(width = 0.2, height = 0.3, x = 0.99,
y = unit(4, "lines"), just = c("right","bottom"))
full <- function() {
print(hf.bb)
print(hist, vp = vp)
}
full()
write.csv(gdd.yr, file="~/Documents/git/springfreeze/output/hf_gdd.csv", row.names=FALSE)
write.csv(bbg, file="~/Documents/git/springfreeze/output/mean_bbgdd.csv", row.names=FALSE)
install.packages("knitr")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
=======
hist(fake.e$dp.e[sunny.e==1])
hist(fake.e$dp.e[sunny.e==2])
mean(fake.e$dp.e) # 61.2
sd(fake.e$dp.e) # 15.9
display(lm(dp.e~sunny.e, data=fake.e))
#lm(formula = dp.e ~ sunny.e, data = fake.e)
#coef.est coef.se
#(Intercept) 46.04     0.22
#sunny.e2    30.24     0.31
#---
#  n = 1000, k = 2
#residual sd = 4.94, R-Squared = 0.90
## And now, we triple the sample size...
nsunny.s = 2
rep.s = 15
ntot.s = nsunny.s*rep.s
sunny.s = gl(nsunny.s, rep.s, length=ntot.s)
sunnydiff.s = 10
sunnydiff.sd.s = 0
suns.s<-rnorm(ntot.s, 55, 5)
base.s <- 45
child.s <- base.s + suns.s-mean(suns.s)
mm.s <- model.matrix(~(sunny.s)^2, data.frame=(sunny.s))
fake.s <- vector()
for (i in 1:length(ntot.s)){
coeff.s <- c(child.s[i],
rnorm(1, sunnydiff.s, sunnydiff.sd.s)
)
dp.s <- rnorm(n = length(sunny.s), mean = mm.s %*% coeff.s, sd = 5)
fake.s <- data.frame(dp.s=dp.s, sunny.s=sunny.s)
}
hist(fake.s$dp.s)
mean(fake.s$dp.s) # 52.8
sd(fake.s$dp.s) # 6.93
display(lm(dp.s~sunny.s, data=fake.s))
#lm(formula = dp.s ~ sunny.s, data = fake.s)
#coef.est coef.se
#(Intercept) 48.01     0.13
#sunny.s2     9.66     0.18
#---
#  n = 3000, k = 2
#residual sd = 4.97, R-Squared = 0.49
#### Let's plot the effects!
fake$sunny<-ifelse(fake$sunny==1, "control", "sunnyD")
base<- qplot(sunny, dp, data = fake, geom="boxplot", color=sunny) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.e$sunny.e<-ifelse(fake.e$sunny.e==1, "control", "sunnyD")
effect<- qplot(sunny.e, dp.e, data = fake.e, geom="boxplot", color=sunny.e) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.s$sunny.s<-ifelse(fake.s$sunny.s==1, "control", "sunnyD")
sample<- qplot(sunny.s, dp.s, data = fake.s, geom="boxplot", color=sunny.s) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
grid.arrange(base, effect, sample, ncol=3, nrow=1)
fake$child<- as.numeric(sample(1000))
fake.e$child.e<-as.numeric(sample(1000))
fake.s$child.s<-as.numeric(sample(3000))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
#bh<-hist(fake$dp)
#grid.arrange(bg,bh, ncol=1, nrow=2)
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
#eh<-hist(fake.e$dp.e)
#grid.arrange(eg,eh, ncol=1, nrow=2)
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
#sh<-hist(fake.s$dp.s)
#grid.arrange(sg,sh, ncol=1, nrow=2)
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
fake$child<- as.numeric(sample(10))
fake.e$child.e<-as.numeric(sample(10))
fake.s$child.s<-as.numeric(sample(30))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
library(arm)
library(ggplot2)
library(gridExtra)
## What is the effect size in this example?
ES = (55-45)/5 ## ES = 2
SE = 5/(sqrt(100)) ## SE = 0.16
## What about when we triple the effect size?
ES = (75-45)/5 ## ES = 6
SE = 5/(sqrt(100)) ## SE stays the same
## How about when we triple the sample size?
ES = (55-45)/5 ## ES is 2 like before but...
SE = 5/(sqrt(300)) ## SE decreases slightly - SE = 0.09
### Andrew states that " it is generally better to double the effect size [theta] than to double the sample size [n]"
## here we can see that doubling the sample size decreases the standard error at a slower rate than doubling the effect size
# The SE: effect size influences the numerator, sample size influences the denominator
nsunny = 2
rep = 50
ntot = nsunny*rep
sunny = gl(nsunny, rep, length=ntot)
sunnydiff = 10
sunnydiff.sd = 0
suns<-rnorm(ntot, 55, 5)
base <- 45
child <- base + suns-mean(suns)
mm <- model.matrix(~(sunny)^2, data.frame=(sunny))
fake <- vector()
for (i in 1:length(ntot)){
coeff <- c(child[i],
rnorm(1, sunnydiff, sunnydiff.sd)
)
dp <- rnorm(n = length(sunny), mean = mm %*% coeff, sd = 5)
fake <- data.frame(dp=dp, sunny=sunny)
}
hist(fake$dp[sunny==1])
hist(fake$dp[sunny==2])
mean(fake$dp) # 50.5
sd(fake$dp) # 7.24
display(lm(dp~sunny, data=fake))
#lm(formula = dp ~ sunny, data = fake)
#coef.est coef.se
#(Intercept) 45.33     0.23
#sunny2      10.25     0.32
#---
#  n = 1000, k = 2
#residual sd = 5.11, R-Squared = 0.50
### Alright, now let's triple the effect size...
### Sunny D increases the level of dopamine to 75 ng/ml - we'll keep the sample size the same
nsunny.e = 2
rep.e = 50
ntot.e = nsunny.e*rep.e
sunny.e = gl(nsunny.e, rep.e, length=ntot.e)
sunnydiff.e = 30
sunnydiff.sd.e = 0
suns.e<-rnorm(ntot.e, 75, 5)
base.e <- 45
child.e <- base.e + suns.e-mean(suns.e)
mm.e <- model.matrix(~(sunny.e)^2, data.frame=(sunny.e))
fake.e <- vector()
for (i in 1:length(ntot.e)){
coeff.e <- c(child.e[i],
rnorm(1, sunnydiff.e, sunnydiff.sd.e)
)
dp.e <- rnorm(n = length(sunny.e), mean = mm.e %*% coeff.e, sd = 5)
fake.e <- data.frame(dp.e=dp.e, sunny.e=sunny.e)
}
hist(fake.e$dp.e[sunny.e==1])
hist(fake.e$dp.e[sunny.e==2])
mean(fake.e$dp.e) # 61.2
sd(fake.e$dp.e) # 15.9
display(lm(dp.e~sunny.e, data=fake.e))
#lm(formula = dp.e ~ sunny.e, data = fake.e)
#coef.est coef.se
#(Intercept) 46.04     0.22
#sunny.e2    30.24     0.31
#---
#  n = 1000, k = 2
#residual sd = 4.94, R-Squared = 0.90
## And now, we triple the sample size...
nsunny.s = 2
rep.s = 150
ntot.s = nsunny.s*rep.s
sunny.s = gl(nsunny.s, rep.s, length=ntot.s)
sunnydiff.s = 10
sunnydiff.sd.s = 0
suns.s<-rnorm(ntot.s, 55, 5)
base.s <- 45
child.s <- base.s + suns.s-mean(suns.s)
mm.s <- model.matrix(~(sunny.s)^2, data.frame=(sunny.s))
fake.s <- vector()
for (i in 1:length(ntot.s)){
coeff.s <- c(child.s[i],
rnorm(1, sunnydiff.s, sunnydiff.sd.s)
)
dp.s <- rnorm(n = length(sunny.s), mean = mm.s %*% coeff.s, sd = 5)
fake.s <- data.frame(dp.s=dp.s, sunny.s=sunny.s)
}
hist(fake.s$dp.s)
mean(fake.s$dp.s) # 52.8
sd(fake.s$dp.s) # 6.93
display(lm(dp.s~sunny.s, data=fake.s))
#lm(formula = dp.s ~ sunny.s, data = fake.s)
#coef.est coef.se
#(Intercept) 48.01     0.13
#sunny.s2     9.66     0.18
#---
#  n = 3000, k = 2
#residual sd = 4.97, R-Squared = 0.49
#### Let's plot the effects!
fake$sunny<-ifelse(fake$sunny==1, "control", "sunnyD")
base<- qplot(sunny, dp, data = fake, geom="boxplot", color=sunny) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.e$sunny.e<-ifelse(fake.e$sunny.e==1, "control", "sunnyD")
effect<- qplot(sunny.e, dp.e, data = fake.e, geom="boxplot", color=sunny.e) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
fake.s$sunny.s<-ifelse(fake.s$sunny.s==1, "control", "sunnyD")
sample<- qplot(sunny.s, dp.s, data = fake.s, geom="boxplot", color=sunny.s) +
xlab("Sunny D consumption") + ylab("Dopamine levels (ng/ml)") + ylim(30,85)
grid.arrange(base, effect, sample, ncol=3, nrow=1)
fake$child<- as.numeric(sample(100))
fake.e$child.e<-as.numeric(sample(100))
fake.s$child.s<-as.numeric(sample(300))
bg<-ggplot(fake, aes(x=child, y=dp)) + geom_point(aes(color=sunny)) + geom_smooth(method="lm")
eg<-ggplot(fake.e, aes(x=child.e, y=dp.e)) + geom_point(aes(color=sunny.e)) + geom_smooth(method="lm")
sg<-ggplot(fake.s, aes(x=child.s, y=dp.s)) + geom_point(aes(color=sunny.s)) + geom_smooth(method="lm")
grid.arrange(bg,eg,sg, ncol=3, nrow=1)
display(mod.base);display(mod.e);display(mod.s)
mod.base<-lm(dp~sunny, data=fake)
mod.e<-lm(dp.e~sunny.e, data=fake.e)
mod.s<-lm(dp.s~sunny.s, data=fake.s)
display(mod.base);display(mod.e);display(mod.s)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
forlatex = TRUE # set to FALSE if just trying new figures, TRUE if outputting for final
runstan = TRUE # set to TRUE to actually run stan models. FALSE if loading from previous runs
library(ggplot2)
library(rstan)
library(rstanarm)
library(shinystan)
library(bayesplot)
library(dplyr)
setwd("~/Documents/git/springfreeze/")
source('scripts/stan/savestan.R')
dx<-read.csv("output/dvrdata_danf.csv", header=TRUE)
dx<-dx%>%filter(species!="VIBCAS")%>%filter(species!="VIBLAN")
dx$sp <- as.numeric(as.factor(dx$sp))
dx$site <- as.numeric(as.factor(dx$site))
dx$risk<-dx$lday-dx$bday
dx<-dx[!is.na(dx$risk),]
dx$chill<-dx$chilling
levels(dx$warm) = c(0,1); levels(dx$photo) = c(0, 1); levels(dx$chill) = 1:3; levels(dx$site) = 1:2
dx$warm <- as.numeric(dx$warm)
dx$photo <- as.numeric(dx$photo)
dx$chill <- as.numeric(dx$chill)
dx$site<- as.numeric(dx$site)
dx$chill1 = ifelse(dx$chill == 1, 1, 0)
dx$chill2 = ifelse(dx$chill == 2, 1, 0)
with(dx, table(chill1, chill2)) # all three levels in here
dxb <- dx[!is.na(dx$risk),]
View(dxb)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
forlatex = TRUE # set to FALSE if just trying new figures, TRUE if outputting for final
runstan = TRUE # set to TRUE to actually run stan models. FALSE if loading from previous runs
# Analysis of bud burst experiment 2015.
library(ggplot2)
library(rstan)
library(rstanarm)
library(shinystan)
library(bayesplot)
library(dplyr)
setwd("~/Documents/git/springfreeze/")
source('scripts/stan/savestan.R')
dx<-read.csv("output/fakedata_dvr.csv", header=TRUE)
View(dx)
dxb <- dx[!is.na(dx$risk),]
risk = dxb$risk # dvr as response
warm = dxb$warm
sp = as.numeric(dxb$sp)
photo = dxb$photo
chill1 = as.numeric(dxb$chill1)
chill2 = as.numeric(dxb$chill2)
N = length(risk)
n_sp = length(unique(dxb$sp))
datalist.b<-list(risk=risk, warm=warm, sp=sp, photo=photo, chill1=chill1, chill2=chill2, N=N, n_sp=n_sp)
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=3000, iter = 3000, chains = 4,
control = list(adapt_delta = 0.99))
unique(dxb$warm)
unique(dxb$photo)
unique(dxb$chill1)
unique(dxb$chill2)
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=4000, iter = 3000, chains = 4,
control = list(adapt_delta = 0.99))
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=3000, iter = 4000, chains = 4,
control = list(adapt_delta = 0.99))
doym.b <- stan('scripts/stan/dvr_sp_chill_inter_pool.stan', ### change when divergent transitions improve!!
data = datalist.b, warmup=1500, iter = 2000, chains = 2,
control = list(adapt_delta = 0.99))
launch_shinystan(doym.b)
>>>>>>> Stashed changes
