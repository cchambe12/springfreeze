}
pep<-dxx%>%dplyr::select(lat, long, prov, start, end)
pep<-pep[(!is.na(pep$start) & !is.na(pep$end)),]
pep$start<-as.Date(pep$start)
pep$end<-as.Date(pep$end)
pep<-pep[!duplicated(pep),]
pep$risk<-(pep$end-pep$start) + 1
pep.expand <- pep[rep(row.names(pep), pep$risk), ]
pep.expand<-data.frame(pep.expand,date=pep.expand$start+(sequence(pep$risk)-1))
pep.expand$date<-as.Date(pep.expand$date)
pep.expand$start<-as.Date(pep.expand$start)
pep.expand$end<-as.Date(pep.expand$end)
pep.expand<-right_join(pep.expand, dxx$Tmin, by="date")
pep.expand$Tmin <- dxx$Tmin[match(pep.expand$date, dxx$date) & match(pep.expand$prov, dxx$prov)]
View(pep.expand)
pep.expand$Tmin <- dxx$Tmin[match(pep.expand$date, dxx$date) & match(pep.expand$prov, dxx$prov)]
pep.expand$Tmin[which(pep.expand$date==dxx$date & pep.expand$prov==dxx$prov)]<-dxx$Tmin
dxx$date[which(dxx$date==pep.expand$date & pep.expand$prov==dxx$prov)]<-pep.expand$date
new <- dxx[ dxx$date %in% pep.expand$date | dxx$prov %in% pep.expand$prov,]
new <- dxx[ dxx$date %in% pep.expand$date & dxx$prov %in% pep.expand$prov,]
View(new)
dxx<-dplyr::select(dxx, prov, date, Tmin)
new <- dxx[ dxx$date %in% pep.expand$date & dxx$prov %in% pep.expand$prov,]
new <- dxx[ dxx$date == pep.expand$date & dxx$prov == pep.expand$prov,]
new <- dxx[ dxx$date = pep.expand$date & dxx$prov = pep.expand$prov,]
dxx<-dxx[!duplicated(dxx),]
new <- dxx[ dxx$date %in% pep.expand$date & dxx$prov %in% pep.expand$prov,]
new<-new[!duplicated(new),]
new <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
View(new)
d.aes <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$count <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(d.aes)
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$count <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
View(d.aes)
mod<-lm(count~lat*long, data=d.aes)
summary(mod)
d.aes <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
d.aes$num.years<-ave(
d.aes$year, d.aes$prov, FUN=function(x)
cumsum(c(0, head(x, -1)))
)
View(d.aes)
d.aes$num.years<-aggregate(d.aes$count = year ~ prov
FUN = function(x){NROW(x)})
d.aes$num.years<-aggregate(cbind(count = year) ~ prov
FUN = function(x){NROW(x)})
d.aes$num.years<-aggregate(cbind(count = year) ~ prov,
FUN = function(x){NROW(x)})
d.aes$num.years<-aggregate(cbind(count = year) ~ prov,
data=d.aes,
FUN = function(x){NROW(x)})
d.aes<-aggregate(d.aes$num.years = d.aes$year ~ d.aes$prov,
FUN = function(x){NROW(x)})
d.aes<-aggregate(d.aes$num.years == d.aes$year ~ d.aes$prov,
FUN = function(x){NROW(x)})
d.aes <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
df <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
df <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
d.aes<-df
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
d.aes$num.years<-count(d.aes, "year")
d.aes$num.years<-count(d.aes, "year", by=prov)
leaf$end<-leaf[count(year,prov),]
d.aes$num.years<-d.aes[count(year,prov),]
d.aes$num.years<-d.aes[sum(year,prov),]
d.aes$num.years<-d.aes[count(d.aes$year,d.aes$prov),]
d.aes$num.years<-d.aes[summ(d.aes$year,d.aes$prov),]
d.aes$num.years<-d.aes[sum(d.aes$year,d.aes$prov),]
d.aes$num.years<-aggregate(year ~ prov, data = d.aes, FUN = length)
d.aes<-count(d.aes, year, prov)
View(d.aes)
d.aes<-df
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
num.years<-as.data.frame(table(d.aes[,c("year","prov")]))
d.aes$num.years<-num.yeasr[which(num.yeasr$Freq>0),]
d.aes$num.years<-num.years[which(num.years$Freq>0),]
View(num.years)
table(d.aes$year)
table(d.aes$year, d.aes$prov)
num.years<-as.data.frame(table(d.aes[,c("prov","year")]))
d.aes$num.years<-num.years[which(num.years$Freq>0),]
View(d.aes)
num.years<-as.data.frame(table(d.aes[c("prov","year"),]))
View(num.years)
num.years<-count(d.aes, year, prov)
View(num.years)
num.years<-count(d.aes, prov, year)
View(num.years)
d.aes$num.years<- ave(d.aes$year, df[,("prov")], FUN=length)
whynas<-d.aes[is.na(d.aes$Tmin),]
View(whynas)
unique(whynas$prov)
provs<-unique(whynas$prov)
match<-dxx[match(dxx$prov %in% provs)]
match<-dxx[match(dxx$prov %in% provs),]
match<-dxx[table(match(dxx$prov %in% provs),)]
match<-dxx[table(match(dxx$prov %in% provs)),]
match<-match(dxx$prov %in% provs)
match<-dxx$prov %in% provs
match<-provs %in% dxx$prov
match
match<-function(x, y) dxx$prov[match(provs, dxx$prov),]
View(match)
match<-dxx$prov[match(provs, dxx$prov),]
match<-provs[match(provs, dxx$prov),]
list<-provs[provs !%in% dxx$prov]
list<-provs[!provs %in% dxx$prov]
list<-provs[!dxx$prov %in% provs]
list<-provs[!(unique(dxx$prov)) %in% provs]
list<-provs[!provs %in% (unique(dxx$prov))]
View(d.clean)
View(dxx)
tmin<-dxx[!is.na(dxx$Tmin),]
View(tmin)
list<-provs[!provs %in% (unique(tmin$prov))]
list
provs
unique(d.aes$prov)
unique(d.aes$num.years)
d.aes$num.years<- ave(d.aes$year, df[,("prov")], FUN=count)
d.aes$num.years<- ave(d.aes$year, df[,("prov")], FUN=sum)
d.aes$num.years<- ave(d.aes$year, d.aes[,("prov")], FUN=length)
unique(d.aes$num.years)
d.total<-d.aes%>%dplyr::select(prov, year)%>% ave(d.aes$year, d.aes[,("prov")], FUN=length)
d.total<-d.aes%>%dplyr::select(prov, year)
d.total$num.years<-ave(d.aes$year, d.aes[,("prov")], FUN=length)
View(d.total)
unique(d.total$num.years)
d.total<-d.total[!duplicated(d.total),]
d.total<-d.aes%>%dplyr::select(prov, year)
d.total<-d.total[!duplicated(d.total),]
d.total$num.years<-ave(d.aes$year, d.aes[,("prov")], FUN=length)
d.total$num.years<-ave(d.total$year, d.total[,("prov")], FUN=length)
unique(d.total$num.years)
2016-1950
unique(sort(d.total$num.years))
unique(sort(as.numeric(d.total$num.years)))
View(d.total)
df <- merge(d.total, d.aes, by=c('prov', 'year'), sort = FALSE)
View(df)
df <- merge(pep.expand, dxx, by=c('prov', 'date'), sort = FALSE)
d.aes<-df
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
d.total<-d.aes%>%dplyr::select(prov, year)
d.total<-d.total[!duplicated(d.total),]
d.total$num.years<-ave(d.total$year, d.total[,("prov")], FUN=length)
d.aes <- merge(d.total, d.aes, by=c('prov', 'year'), sort = FALSE)
View(d.aes)
d.aes$num.years<-as.numeric(d.aes$num.years)
View(d.aes)
unique(sort(as.numeric(d.aes$freezes)))
d.aes$freezes<-ifelse(d.aes$freezes>0, 1, 0)
d.aes$freezes<-ave(d.aes$freezes, d.aes$prov, FUN=function(x) cumsum(c(0, head(x, -1))))
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
d.aes$freezes<-ifelse(d.aes$freezes>0, 1, 0)
d.aes$freezes<-ave(d.aes$freezes, d.aes$prov,d.aes$year, FUN=function(x) cumsum(c(0, head(x, -1))))
unique(sort(as.numeric(d.aes$freezes)))
d.aes$frequency<-as.numeric(d.aes$freezes/d.aes$num.years)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, fs[,c("prov","year")], FUN=length)
View(fs)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, fs[,c("prov","year")], FUN=length)
fsi<-function(x) ifelse(freeze>0,1,0)
fs$frz.years<-ave(fs$freezes, fs[,c("prov","year")], FUN=fsi)
fsi<-function(x) ifelse(fs$freezes>0,1,0)
fs$frz.years<-ave(fs$freezes, fs[,c("prov","year")], FUN=fsi)
View(match)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fsi<-function(x) ifelse(fs$freezes>0,1,0)
fs$freezes<-ifelse(fs$freezes>0,1,0)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, d.total[,("prov")], FUN=length)
fs$frz.years<-ave(fs$freezes, fs[,("prov")], FUN=length)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fs$freezes<-ifelse(fs$freezes>0,1,0)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, fs[,("prov")], FUN=length)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fs$freezes<-ifelse(fs$freezes>0,1,NA)
fs<-na.omit(fs)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, fs[,("prov")], FUN=length)
d.aes <- merge(fs, d.aes, by=c('prov', 'year'), sort = FALSE)
d.aes$frequency<-as.numeric(d.aes$frz.years/d.aes$num.years)
d.aes<-df
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
d.total<-d.aes%>%dplyr::select(prov, year)
d.total<-d.total[!duplicated(d.total),]
d.total$num.years<-ave(d.total$year, d.total[,("prov")], FUN=length)
d.aes <- merge(d.total, d.aes, by=c('prov', 'year'), sort = FALSE)
d.aes$num.years<-as.numeric(d.aes$num.years)
fs<-d.aes%>%dplyr::select(prov, year, freezes)
fs<-fs[!duplicated(fs),]
fs$freezes<-ifelse(fs$freezes>0,1,NA)
fs<-na.omit(fs)
fs<-fs[!duplicated(fs),]
fs$frz.years<-ave(fs$freezes, fs[,("prov")], FUN=length)
fs<-dplyr::select(-freezes)
fs<-dplyr::select(fs,-freezes)
d.aes <- merge(fs, d.aes, by=c('prov', 'year'), sort = FALSE)
d.aes$frequency<-as.numeric(d.aes$frz.years/d.aes$num.years)
mod<-lm(frequency~lat*long, data=d.aes)
summary(mod)
mod<-lm(frequency~risk, data=d.aes)
summary(mod)
d.aes<-df
d.aes$year<-substr(d.aes$date, 0,4)
d.aes$frz<-ifelse(d.aes$Tmin<=-2.2, 1, 0)
d.aes$freezes <- ave(
d.aes$frz, d.aes$prov, d.aes$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
setwd("~/Documents/git/ospree/analyses")
ospree <- read.csv("output/ospree_clean_withchill.csv", header=TRUE)
xx<-ospree
xx <- within(xx, { prov.lat <- ave(provenance.lat, datasetID, species, FUN=function(x) length(unique(x)))}) # multiple provenance.lats
xx <- within(xx, { field.sample <- ave(fieldsample.date, datasetID, species, FUN=function(x) length(unique(x)))}) # mult fieldsample.date
xx <- within(xx, { force <- ave(forcetemp, datasetID, species, FUN=function(x) length(unique(x)))}) # mult forcetemp
xx <- within(xx, { photo <- ave(photoperiod_day, datasetID, species, FUN=function(x) length(unique(x)))}) # mult photoperiod_day
xx <- within(xx, { chill <- ave(chilltemp, datasetID, species, FUN=function(x) length(unique(x)))}) # mult expchill
xx <- within(xx, { spp <- ave(species, datasetID, FUN=function(x) length(unique(x)))}) # mult species
xx <- within(xx, { prov.long <- ave(provenance.long, datasetID, species, FUN=function(x) length(unique(x)))}) # multiple provenance.longs
xx<-dplyr::select(xx, datasetID, study, prov.lat, prov.long, field.sample, force, photo, chill, spp)
xx<-xx[!duplicated(xx),]
write.csv(xx, file="~/Documents/git/ospree/analyses/output/studytype_table.csv", row.names = FALSE)
View(xx)
setwd("~/Documents/git/ospree")
bb.all <- read.csv("output/ospree_clean_withchill_BB.csv", header=TRUE)
bb.all <- read.csv("analyses/output/ospree_clean_withchill_BB.csv", header=TRUE)
View(bb.all)
View(bb.all)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
# Set Working Directory
setwd("~/Documents/git/freezingexperiment/analyses/input")
d<-read.csv("weather_allsites.csv", header=TRUE)
d<-dplyr::rename(d, doy=Julian.Date)
d$year<-substr(d$Date, 7, 10)
### Harvard Forest #####
hf<-d%>%filter(site=="hf")%>%filter(year>=1990)
hf<-hf %>% filter(doy <=240)
hf$gdd <- hf$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
hf$gdd <-ifelse(hf$gdd>0, hf$gdd, 0)
hf$count <- ave(
hf$gdd, hf$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
hf$frz<- ifelse((hf$AirTMin<=-2.2), 1, 0)
hf$fs<- ifelse((hf$count >= 200 & hf$frz == 1 & hf$count<=300), TRUE, NA)
hf.fsi<-hf%>%dplyr::select(year, fs)
hf.fsi<-hf.fsi[!duplicated(hf.fsi),]
hf.fsi<-na.omit(hf.fsi)
### White Mountains #####
wm<-d%>%filter(site=="bart")%>%filter(year>=1990)
wm<-wm %>% filter(doy <=240)
wm$gdd <- wm$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
wm$gdd <-ifelse(wm$gdd>0, wm$gdd, 0)
wm$count <- ave(
wm$gdd, wm$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
wm$frz<- ifelse((wm$AirTMin<=-2.2), 1, 0)
wm$fs<- ifelse((wm$count >= 200 & wm$frz == 1 & wm$count<=300), TRUE, NA)
wm.fsi<-wm%>%dplyr::select(year, fs)
wm.fsi<-wm.fsi[!duplicated(wm.fsi),]
wm.fsi<-na.omit(wm.fsi)
### Grant ##### Need to find average because two stations...
gr<-d%>%filter(site=="berlin")%>%filter(year>=1990)
gr<-gr %>% filter(doy <=240)
gr$gdd <- gr$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
gr$gdd <-ifelse(gr$gdd>0, gr$gdd, 0)
gr$count <- ave(
gr$gdd, gr$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
gr$frz<- ifelse((gr$AirTMin<=-2.2), 1, 0)
gr$fs<- ifelse((gr$count >= 200 & gr$frz == 1 & gr$count<=300), TRUE, NA)
gr.fsi<-gr%>%dplyr::select(year, fs)
gr.fsi<-gr.fsi[!duplicated(gr.fsi),]
gr.fsi<-na.omit(gr.fsi)
gr1<-d%>%filter(site=="merr")%>%filter(year>=1990)
gr1<-gr1 %>% filter(doy <=240)
gr1$gdd <- gr1$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
gr1$gdd <-ifelse(gr1$gdd>0, gr1$gdd, 0)
gr1$count <- ave(
gr1$gdd, gr1$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
gr1$frz<- ifelse((gr1$AirTMin<=-2.2), 1, 0)
gr1$fs<- ifelse((gr1$count >= 200 & gr1$frz == 1 & gr1$count<=300), TRUE, NA)
gr1.fsi<-gr1%>%dplyr::select(year, fs)
gr1.fsi<-gr1.fsi[!duplicated(gr1.fsi),]
gr1.fsi<-na.omit(gr1.fsi)
gr2<-d%>%filter(site=="ct")%>%filter(year>=1990)
gr2<-gr2 %>% filter(doy <=240)
gr2$gdd <- gr2$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
gr2$gdd <-ifelse(gr2$gdd>0, gr2$gdd, 0)
gr2$count <- ave(
gr2$gdd, gr2$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
gr2$frz<- ifelse((gr2$AirTMin<=-2.2), 1, 0)
gr2$fs<- ifelse((gr2$count >= 200 & gr2$frz == 1 & gr2$count<=300), TRUE, NA)
gr2.fsi<-gr2%>%dplyr::select(year, fs)
gr2.fsi<-gr2.fsi[!duplicated(gr2.fsi),]
gr2.fsi<-na.omit(gr2.fsi)
### Saint Hipp #####
sh<-d%>%filter(site=="sh")%>%filter(year>=1990)
sh<-sh %>% filter(doy <=240)
sh$gdd <- sh$AirTMax - 5 # Can be 0 here if want 0 degC as threshold
sh$gdd <-ifelse(sh$gdd>0, sh$gdd, 0)
sh$count <- ave(
sh$gdd, sh$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
sh$frz<- ifelse((sh$AirTMin<=-2.2), 1, 0)
sh$fs<- ifelse((sh$count >= 200 & sh$frz == 1 & sh$count<=300), TRUE, NA)
sh.fsi<-sh%>%dplyr::select(year, fs)
sh.fsi<-sh.fsi[!duplicated(sh.fsi),]
sh.fsi<-na.omit(sh.fsi)
############### Find Last Freeze Dates for each site.....
## Harvard Forest ##
hf.last<-hf%>%filter(frz>0)
hf.last<-hf.last[order(hf.last$doy,hf.last$year),]
hf.last<-hf.last[!duplicated(hf.last$year, fromLast=TRUE),]
hf.last$last<-hf.last$Date
## White Mountains ##
wm.last<-wm%>%filter(frz>0)
wm.last<-wm.last[order(wm.last$doy,wm.last$year),]
wm.last<-wm.last[!duplicated(wm.last$year, fromLast=TRUE),]
wm.last$last<-wm.last$Date
## Grant(s)...
# 1:
gr.last<-gr%>%filter(frz>0)
gr.last<-gr.last[order(gr.last$doy,gr.last$year),]
gr.last<-gr.last[!duplicated(gr.last$year, fromLast=TRUE),]
gr.last$last<-gr.last$Date
# 2:
gr1.last<-gr1%>%filter(frz>0)
gr1.last<-gr1.last[order(gr1.last$doy,gr1.last$year),]
gr1.last<-gr1.last[!duplicated(gr1.last$year, fromLast=TRUE),]
gr1.last$last1<-gr1.last$Date
# 3:
gr2.last<-gr2%>%filter(frz>0)
gr2.last<-gr2.last[order(gr2.last$doy,gr2.last$year),]
gr2.last<-gr2.last[!duplicated(gr2.last$year, fromLast=TRUE),]
gr2.last$last2<-gr2.last$Date
gr.last<-full_join(gr.last, gr1.last)
gr.last<-full_join(gr.last, gr2.last)
## Saint Hipp ##
sh.last<-sh%>%filter(frz>0)
sh.last<-sh.last[order(sh.last$doy,sh.last$year),]
sh.last<-sh.last[!duplicated(sh.last$year, fromLast=TRUE),]
sh.last$last<-sh.last$Date
View(hf.fsi)
View(hf.last)
View(hf.fsi)
View(hf)
hf.test<-hf%>%filter(year==2012)
day<-hf.test$Date[which(hf.test$gdd>=150 & hf.test$gdd<=160)]
day
View(hf.test)
day<-hf.test$doy[which(hf.test$count>=150 & hf.test$count<=160)]
day
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Integrate Phenology Data and compare methodologies
# Set Working Directory
setwd("~/Documents/git/springfreeze/input")
budburst<-read.csv("hf003-06-mean-spp.csv",header=TRUE, sep=",")
View(budburst)
d.2012<-budburst
d.2012<-budburst%>%filter(year==2012)
View(d.2012)
dvr.spp<-c("BEPA", "FAGR")
d.2012<-budburst%>%filter(year==2012)%>%filter(species %in% dvr.spp)
View(d.2012)
View(budburst)
2012.spp<-budburst$species[which(budburst$year==2012)]
spp.12<-budburst$species[which(budburst$year==2012)]
spp.12
dvr.spp<-c("BEPA", "FAGR", "ACPE", "PRSE")
d.2012<-budburst%>%filter(year==2012)%>%filter(species %in% dvr.spp)
View(d.2012)
leaves<-budburst[(!is.na(budburst$l75.jd)),]
View(leaves)
leaves<-leaves%>%filter(year==2012)
unique(leaves$species)
View(leaves)
View(budburst)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(data.table)
library(car)
library(xtable)
library(broom)
library(tibble)
library(lme4)
# Set Working Directory
setwd("~/Documents/git/springfreeze")
d<-read.csv("input/Budburst.clean.csv",header=TRUE)
tx<-c("CS0", "WL1")
dx<- d %>%
dplyr::select(ind, treatcode, lday, bday, site) %>%
filter(treatcode %in% tx)
View(dx)
dx<-na.omit(dx)
dx$species<-substr(dx$ind, 1, 6)
dx<-dx%>%filter(species!="VIBCAS")%>%filter(species!="VIBLAN") # all entries for two species have the same budburst and leafout day, removed because probably from error
small.spp<-dx %>% dplyr::select(species, treatcode) %>% filter(treatcode=="WL1")
spp<-unique(small.spp$species)
dx<-dx%>% filter(species %in% spp)
dx<-dx%>%dplyr::select(-site, -ind)
dx$mean<-ave(dx$bday, dx$species, dx$treatcode)
dx<-dx%>%
group_by(mean, species)%>%
arrange(species)%>%
filter(row_number()==1)
dx<-dx%>%group_by(species, treatcode) %>% arrange(species, desc(treatcode))
dx$code<-reorder(dx$species, dx$bday)
View(dx)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# Integrate Phenology Data and compare methodologies
# Set Working Directory
setwd("~/Documents/git/springfreeze/input")
budburst<-read.csv("hf003-06-mean-spp.csv",header=TRUE, sep=",")
dvr.spp<-c("BEPA", "FAGR", "ACPE", "PRSE", "ACSA")
d.2012<-budburst%>%filter(year==2012)%>%filter(species %in% dvr.spp)
View(d.2012)
dvr.spp<-c("BEPA", "FAGR", "ACPE", "PRSE", "ACSA", "POGR")
d.2012<-budburst%>%filter(year==2012)%>%filter(species %in% dvr.spp)
dvr.spp<-c("BEPA", "FAGR", "ACPE", "PRSE", "ACSA", "POGR", "BEAL", "ACRU")
d.2012<-budburst%>%filter(year==2012)%>%filter(species %in% dvr.spp)
