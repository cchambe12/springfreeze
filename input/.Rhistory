# converting response.time to daystobudburst
dbb$response.time[which(dbb$datasetID=="ghelardini10")] <-
as.numeric(dbb$response[which(dbb$datasetID=="ghelardini10")])/
as.numeric(dbb$forcetemp[which(dbb$datasetID=="ghelardini10")])
dbb$response.time[which(dbb$datasetID=="heide93")] <-
as.numeric(dbb$response[which(dbb$datasetID=="heide93")])/
as.numeric(dbb$forcetemp[which(dbb$datasetID=="heide93")])
View(d)
View(dbb)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
# Set Working Directory
setwd("~/Documents/git/springfreeze")
lat<-read.csv("input/NOAA_Eur50.csv", header=TRUE)
latitude<-read.csv("input/NOAA_data5", header=TRUE)
latitude<-read.csv("input/NOAA_data5.csv", header=TRUE)
lat11<-latitude %>%
dplyr::select(STATION_NAME,DATE, TAVG, TMIN, TMAX) %>%
filter(STATION_NAME == "FLYVESTATION AALBORG DA") %>%
rename(Tmean = TAVG) %>%
rename(Tmin = TMIN) %>%
rename(Tmax = TMAX) %>%
rename(date = DATE)
lat11$year <- substr(lat11$date, 0, 4)
lat11<- lat11 %>%
filter(year>=1973) %>%
filter(year<2016)
lat11$month<- substr(lat11$date, 5, 6)
lat11$day<- substr(lat11$date, 7,8)
lat11<- lat11 %>%
dplyr::select(-date)%>%
unite(date, year, month, day, sep="-") %>%
dplyr::select(date, Tmean, Tmin, Tmax)
lat11$doy<-yday(lat11$date)
lat11$year<-substr(lat11$date,0,4)
lat11<- lat11 %>%
filter(doy >= 60) %>%
filter(doy <= 100)
lat11$gdd <- lat11$Tmean - 5
lat11$gdd <-ifelse(lat11$gdd>0, lat11$gdd, 0)
lat11$frz<- ifelse((lat11$Tmin<=-5), "freeze", "thaw")
lat11$count <- ave(
lat11$gdd, lat11$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
lat11<- lat11 %>%
filter(doy >= 60) %>%
filter(doy <= 210)
lat11$fs<- ifelse((lat11$count >= 100 & lat11$frz == "freeze"), TRUE, NA)
fly.count<- dplyr::select(lat11, year, fs)
fly.count<-na.omit(fly.count)
fly.count<-as.data.frame(table(fly.count$year))
View(lat11)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
# Set Working Directory
setwd("~/Documents/git/springfreeze/input")
america<-read.csv("NOAA_data.csv", header=TRUE)
amer<-read.csv("NOAA_data2.csv", header=TRUE)
am<-read.csv("NOAA_data3.csv", header=TRUE)
a<-read.csv("NOAA_data4.csv", header=TRUE)
am10<-america %>%
dplyr::select(STATION_NAME,DATE, TAVG, TMIN, TMAX) %>%
filter(STATION_NAME == "PASO ROBLES MUNICIPAL AIRPORT CA US") %>%
rename(Tmin = TMIN) %>%
rename(Tmax = TMAX) %>%
rename(date = DATE)
am10$year <- substr(am10$date, 0, 4)
am10<- am10 %>%
filter(year>=1965) %>%
filter(year<2016)
am10$month<- substr(am10$date, 5, 6)
am10$day<- substr(am10$date, 7,8)
am10<- am10 %>%
dplyr::select(-date)%>%
unite(date, year, month, day, sep="-") %>%
dplyr::select(date, Tmin, Tmax)
am10$doy<-yday(am10$date)
am10$year<-substr(am10$date,0,4)
am10$Tmean <- (am10$Tmax + am10$Tmin)/2
am10$gdd <- am10$Tmean - 5
am10$gdd <-ifelse(am10$gdd>0, am10$gdd, 0)
am10$frz<- ifelse((am10$Tmin<=-5), "freeze", "thaw")
am10$count <- ave(
am10$gdd, am10$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
am10<- am10 %>%
filter(doy >= 60) %>%
filter(doy <= 210)
am10$fs<- ifelse((am10$count >= 150 & am10$frz == "freeze" & am10$count<=400), TRUE, NA)
paso.count<- dplyr::select(am10, year, fs)
paso.count<-na.omit(paso.count)
paso.count<-as.data.frame(table(paso.count$year))
# Anthony, KS, USA: 37.15611N -98.01667
am11<-america %>%
dplyr::select(STATION_NAME,DATE, TAVG, TMIN, TMAX) %>%
filter(STATION_NAME == "DAGGETT AIRPORT CA US") %>%
rename(Tmin = TMIN) %>%
rename(Tmax = TMAX) %>%
rename(date = DATE)
am11$year <- substr(am11$date, 0, 4)
am11<- am11 %>%
filter(year>=1965) %>%
filter(year<2016)
am11$month<- substr(am11$date, 5, 6)
am11$day<- substr(am11$date, 7,8)
am11<- am11 %>%
dplyr::select(-date)%>%
unite(date, year, month, day, sep="-") %>%
dplyr::select(date, Tmin, Tmax)
am11$doy<-yday(am11$date)
am11$year<-substr(am11$date,0,4)
am11$Tmean <- (am11$Tmax + am11$Tmin)/2
am11$gdd <- am11$Tmean - 5
am11$gdd <-ifelse(am11$gdd>0, am11$gdd, 0)
am11$frz<- ifelse((am11$Tmin<=-5), "freeze", "thaw")
am11$count <- ave(
am11$gdd, am11$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
am11<- am11 %>%
filter(doy >= 60) %>%
filter(doy <= 210)
am11$fs<- ifelse((am11$count >= 150 & am11$frz == "freeze" & am11$count<=400), TRUE, NA)
dag.count<- dplyr::select(am11, year, fs)
dag.count<-na.omit(dag.count)
dag.count<-as.data.frame(table(dag.count$year))
am10<-a %>%
dplyr::select(STATION_NAME,DATE, TAVG, TMIN, TMAX) %>%
filter(STATION_NAME == "PASO ROBLES MUNICIPAL AIRPORT CA US") %>%
rename(Tmin = TMIN) %>%
rename(Tmax = TMAX) %>%
rename(date = DATE)
am10$year <- substr(am10$date, 0, 4)
am10<- am10 %>%
filter(year>=1965) %>%
filter(year<2016)
am10$month<- substr(am10$date, 5, 6)
am10$day<- substr(am10$date, 7,8)
am10<- am10 %>%
dplyr::select(-date)%>%
unite(date, year, month, day, sep="-") %>%
dplyr::select(date, Tmin, Tmax)
am10$doy<-yday(am10$date)
am10$year<-substr(am10$date,0,4)
am10$Tmean <- (am10$Tmax + am10$Tmin)/2
am10$gdd <- am10$Tmean - 5
am10$gdd <-ifelse(am10$gdd>0, am10$gdd, 0)
am10$frz<- ifelse((am10$Tmin<=-5), "freeze", "thaw")
am10$count <- ave(
am10$gdd, am10$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
am10<- am10 %>%
filter(doy >= 60) %>%
filter(doy <= 210)
am10$fs<- ifelse((am10$count >= 150 & am10$frz == "freeze" & am10$count<=400), TRUE, NA)
paso.count<- dplyr::select(am10, year, fs)
paso.count<-na.omit(paso.count)
paso.count<-as.data.frame(table(paso.count$year))
# Anthony, KS, USA: 37.15611N -98.01667
am11<-a %>%
dplyr::select(STATION_NAME,DATE, TAVG, TMIN, TMAX) %>%
filter(STATION_NAME == "DAGGETT AIRPORT CA US") %>%
rename(Tmin = TMIN) %>%
rename(Tmax = TMAX) %>%
rename(date = DATE)
am11$year <- substr(am11$date, 0, 4)
am11<- am11 %>%
filter(year>=1965) %>%
filter(year<2016)
am11$month<- substr(am11$date, 5, 6)
am11$day<- substr(am11$date, 7,8)
am11<- am11 %>%
dplyr::select(-date)%>%
unite(date, year, month, day, sep="-") %>%
dplyr::select(date, Tmin, Tmax)
am11$doy<-yday(am11$date)
am11$year<-substr(am11$date,0,4)
am11$Tmean <- (am11$Tmax + am11$Tmin)/2
am11$gdd <- am11$Tmean - 5
am11$gdd <-ifelse(am11$gdd>0, am11$gdd, 0)
am11$frz<- ifelse((am11$Tmin<=-5), "freeze", "thaw")
am11$count <- ave(
am11$gdd, am11$year,
FUN=function(x) cumsum(c(0, head(x, -1)))
)
am11<- am11 %>%
filter(doy >= 60) %>%
filter(doy <= 210)
am11$fs<- ifelse((am11$count >= 150 & am11$frz == "freeze" & am11$count<=400), TRUE, NA)
dag.count<- dplyr::select(am11, year, fs)
dag.count<-na.omit(dag.count)
dag.count<-as.data.frame(table(dag.count$year))
View(am10)
View(am11)
View(dag.count)
View(dag.count)
View(paso.count)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Load libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(arm)
library(rstanarm)
# Set Working Directory
setwd("~/Documents/git/springfreeze/input")
df<-read.csv("all.lat.csv", header=TRUE)
mat<-read.csv("matrix.lat.csv",header=TRUE, check.names=FALSE)
#Clean matrix dataframe and join dataframes
mat<-mat %>%
gather(year, fs, -Station)
df2<-mat%>%
filter(mat$year!="Total")%>%
filter(Station!="Total")
d<-full_join(df, mat, by="Station")
d<-d %>%
filter(Station!="Total")%>%
filter(year!="Total")
d$frost<-ifelse(d$fs==0, NA, d$fs)
d<-na.omit(d)
d<-dplyr::select(d,-hf.gdd, -fs)
fs<-as.data.frame(table(d$year))%>%
rename(year=Var1)%>%
rename(fs=Freq)
lat<-as.data.frame(table(d$Latitude))%>%
rename(Latitude=Var1)%>%
rename(lat=Freq)
lat$Latitude<-as.numeric(as.character(lat$Latitude))
d1<-full_join(d,fs,by="year")
d1<-full_join(d1,lat,by="Latitude")
d1$year<-as.numeric(as.character(d1$year))
# Initial Plots
ggplot(d1, aes(x=year, y=fs)) + geom_point(aes(color=Latitude))
ggplot(d1, aes(x=Latitude, y=lat)) + geom_point(aes(color=year))
setwd("~/Documents/git/springfreeze/input")
df<-read.csv("all.lat.csv", header=TRUE)
mat<-read.csv("matrix.lat.csv",header=TRUE, check.names=FALSE)
mat<-mat %>%
gather(year, fs, -Station)
df2<-mat%>%
filter(mat$year!="Total")%>%
filter(Station!="Total")
d<-full_join(df, mat, by="Station")
d<-d %>%
filter(Station!="Total")%>%
filter(year!="Total")
d$frost<-ifelse(d$fs==0, NA, d$fs)
d<-na.omit(d)
d<-dplyr::select(d,-hf.gdd, -fs)
fs<-as.data.frame(table(d$year))%>%
rename(year=Var1)%>%
rename(fs=Freq)
lat<-as.data.frame(table(d$Latitude))%>%
rename(Latitude=Var1)%>%
rename(lat=Freq)
lat$Latitude<-as.numeric(as.character(lat$Latitude))
d1<-full_join(d,fs,by="year")
d1<-full_join(d1,lat,by="Latitude")
d1$year<-as.numeric(as.character(d1$year))
ggplot(d1, aes(x=Latitude, y=lat)) + geom_point(aes(color=region))
View(d1)
ggplot(d1, aes(x=Latitude, y=lat)) + geom_point(aes(color=d1$region))
ggplot(d1, aes(x=Latitude, y=lat)) + geom_point(aes(color=d1$region)) + geom_smooth(method="loess")
mod1<-lm(lat~Latitude + region:Latitude, data=d1)
display(mod1)
mod1<-lm(lat~Latitude + region, data=d1)
display(mod1)
View(d1)
lat<-as.data.frame(table(d$Latitude))%>%
rename(Latitude=Var1)%>%
rename(false.spring=Freq)
lat$Latitude<-as.numeric(as.character(lat$Latitude))
d1<-full_join(d,fs,by="year")
d1<-full_join(d1,lat,by="Latitude")
d1$year<-as.numeric(as.character(d1$year))
ggplot(d1, aes(x=Latitude, y=false.spring)) + geom_point(aes(color=d1$region)) +
geom_smooth(method="loess")
write.csv(d1, file="~/Documents/git/springfreeze/output/latitude.analysis.csv", row.names=FALSE)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
# Install Packages
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(tidyr)
library(mapproj)
library(grid)
library(rworldmap)
# Upload US map
usa <- map_data("usa")
states <- map_data("state")
canada<-map("worldHires","Canada", xlim=c(-141,-53), ylim=c(40,85), col="gray90", fill=TRUE)
gg1<- NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = states, aes(x=long, y = lat, group = group),
fill = "white", color="grey") + geom_polygon(data = canada,
aes(x=long, y = lat, group = group),
fill = "white",
color="grey")
# Upload Data
usa<-read.csv("~/Documents/git/springfreeze/input/america.lat.csv", header=TRUE)
europe<-read.csv("~/Documents/git/springfreeze/input/europe.lat.csv", header=TRUE)
mich<-read.csv("~/Documents/git/springfreeze/input/mich.lat.csv", header=TRUE)
west<-read.csv("~/Documents/git/springfreeze/input/west.lat.csv", header=TRUE)
# USA Map
gg1 +
geom_point(data = usa, aes(x = Longitude, y = Latitude), color = "black", size = 3) +
geom_point(data = usa, aes(x = Longitude, y = Latitude), size = 3) +
geom_point(fill=factor(usa$False.Springs)) + theme(legend.position="none")
am.map <- gg1 + geom_point(data = usa, aes(Longitude, Latitude, size=hf.gdd,color=hf.gdd)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
am.map1<- am.map + geom_point(data = mich, aes(Longitude, Latitude, size=hf.gdd,color=hf.gdd)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
am.map2<- am.map1 + geom_point(data = west, aes(Longitude, Latitude, size=hf.gdd,color=hf.gdd)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs") + theme(legend.position="none") +
guides(size=FALSE)
# Europe Map
# Get the world map
worldMap <- getMap()
# European Countries
europeanUnion <- c("Austria","Belgium","Bulgaria","Croatia","Cyprus",
"Czech Rep.","Denmark","Estonia","Finland","France",
"Germany","Greece","Hungary","Ireland","Italy","Latvia",
"Lithuania","Luxembourg","Malta","Netherlands","Norway","Poland",
"Portugal","Romania","Slovakia","Slovenia","Spain",
"Sweden","Switzerland", "United Kingdom")
indEU <- which(worldMap$NAME%in%europeanUnion)
europeCoords <- lapply(indEU, function(i){
df <- data.frame(worldMap@polygons[[i]]@Polygons[[1]]@coords)
df$region =as.character(worldMap$NAME[i])
colnames(df) <- list("long", "lat", "region")
return(df)
})
europeCoords <- do.call("rbind", europeCoords)
eur <- ggplot(europeCoords) + geom_polygon(data = europeCoords, aes(x = long, y = lat, group=region),
color="grey", fill="white") + coord_map(xlim = c(-13, 35),  ylim = c(32, 71))
eur.map <- eur + geom_point(data = europe, aes(Longitude, Latitude, size=hf.gdd, color=hf.gdd)) +
scale_color_gradient(low="red", high="blue", name="Number of False Springs")  + theme(legend.position="none") +
guides(size=FALSE)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map2
plot2 <- eur.map
legend <- get_legend(eur.map)
blankPlot <- ggplot()+geom_blank(aes(1,1)) +
cowplot::theme_nothing()
# 3. Remove the legend from the box plot
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map2, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
grid.arrange(am.map2, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
plot1 <- am.map2
plot2 <- eur.map
legend <- get_legend(eur.map)
blankPlot <- ggplot()+geom_blank(aes(1,1)) +
cowplot::theme_nothing()
eur.map <- eur.map + theme(legend.position="none")
grid.arrange(am.map2, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
grid.arrange(am.map2, eur.map, legend, ncol=2, nrow = 2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
library(cowplot)
install.packages("cowplot")
library(cowplot)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
library(gridExtra)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid.arrange(am.map2, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
grid.arrange(am.map2, eur.map, legend, ncol=3, widths=c(2.8, 2.8, 0.8))
plot_grid(plot1, eur.map, labels=c("A", "B"), ncol = 2, nrow = 1)
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
grid_arrange_shared_legend <- function(..., ncol = length(list(...)), nrow = 1, position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position="none"))
gl <- c(gl, ncol = ncol, nrow = nrow)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
grid_arrange_shared_legend(plot1, plot2, ncol = 2,
widths = c(2.8, 2.8), heights = 2.2)
